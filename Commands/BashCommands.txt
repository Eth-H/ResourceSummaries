TextSyntax
<> Master title
> Sub title
// comment
[]  Generic keyword, EG username
{} Insertion space, above there will be an indication of what values to insert into the brackets	 	 

<Linux kernel>
List file directories>
	ls
		//Long form list of folders
		ls -l
		//Hidden files
		ls -t
		//All ls commands
		ls -alt
		//Specific file/fodler/path
		ls file.txt

Change directories>
	cd
		//Back one
		cd ..
		//Forward one
		cd .
		//Go to specific location
		cd /home/agent/Desktop

Move files>
	mv
		//Rename file
		mv file.txt new_file_name.txt
		//Copy first argument to second 
		cp file.txt /home/agent/Desktop/newFile.txt
		//Recusrsively copy folders
		cp -r folder /home/agent/Desktop/folder_copy
Manual>
	man
		//Get help with ls command
		man ls
Display contents of a location>
	cat
		//Print text file contents to console
		cat filename
		//Join two files
		cat filename1 filename2
		//Redirect file output
			//Overwrite it
			cat filename1 filename2 > new_file
			//Append to it	
			cat filename1 filename2 >> appended_file
		//Use wildcard operator, match any files: *, match all txt files: *.txt, match files starting with pass: pass*
		cat {}
		
Search files>
	grep
		grep [searchquery] [filename]
		grep Ethan usernames.txt
		//Operators
			//Add the pipe operator, this changes the output of one command to anouther
			//Search for a filename
			ls | grep [filename]
			//Ignore case: -i and recursive search: -r
			grep {} "bob" filename
			
	find
		find [location to search] [how to search] [what to search]
		//Search entire filesystem for files called passwords
		find / -name "passwords"
		//Redirect errors to a certain file 
		find / -name "passwords" 2> /dev/null
		//Find relative to other factors, find files in the last 30 days: -mtime: -30, find files > 10 MB in size: -size +10M, find files that start with media then have some letters with a .exe extension: -name media*.exe
		find [path] {} {}cd home
		find / -name password* 2> /dev/null

	whereis
		//Find all the locations of a program
		whereis gimp
		
Permissions>
	chmod
		//Edit a programs permissions, +x: Give execute permissions, -x: Take	 execute permissions, +w: Give write permissions	
		chmod {} program
Processes>
	//Print running tasks, See more info: -u, See all processes (not only for your user): -ax
	ps {}
	
	//See status of all services
	service --status-all

	
	
History>
	//Show history
	history	
	//Delete history
	history -c

Network>
	Netcat
		//Listen on a port
		nc -l 1337
		//Connect to a port
		nc 192.168.33.2 1337
		//Transfer files
			//Listen on port and send any output recevied content to myfile
			nc -l 1337 > myfile
			//Connect to computer and send the content of myfile
			
			nc 192.168.33.2 1337 < myfile
	//SSH
		//  /etc/passwd /etc/shadow /etc/passwd.
	
		//Connect to secure file server with credentials, add a custom port (otherwise 22 is used): -p
		ssh username@domain.com {}
		//Copy local file to remote server
		scp file.txt username@domain.com:/folder/file.txt
		//Copy remote file to local PC 
		scp username@domain.com:/folder/file.txt file.txt
		//Close connection
		exit
		
		
	//Curl
		//Perform HTTPS tasks
		curl https://example.com/index.php --data "username=luffy&loggedin=true"
		

<Foresensics>		
	Cryptography>
		Stegnography
			Steghide
				steghide extract -sf challenge-aperture-mountain-01.jpg -xf answer.txt 
				//Steganography is the art of hiding the information's existence. At the most basic level, you could open another file (like an image) in a 
				//text editor and hide a message inside of it. You would have to be careful to put it in exactly the right place to avoid corrupting the image, but it could work. There are more advanced forms of steganography too. EG pixel arrangement or audio file frequency  
				//Steghide commad line tool
					//Display information about a cover or stego file.
					steghide info --info
					//embed, extract
					 //Embed file with msg: -ef, --embedfile, specify cover of file used to embed data: -cf, --coverfile, 
					 //specify stego file: -sf, --stegofile, create file and write extracted embedded data to it: -xf, --extractfile 
					steghide {} {} [filename]
					//EG steghide extract -sf [fileName] -xf --flag.txt			
								
								
	Disk Forensics and the File System>		
		//Different file-storage types: EG FAT (12/16/32), NTFS, HFS, ext2/3/4, UNIX
			//FAT and UNIX store info in a flat file
			//ntfs provides indexing and efficient storage, can use to identify files that once existed with Master File Table entries (MFT),
			// directory index includes a $FILE_NAME attribute to store info   
		Memory forensics>
			//Methods: investigating metadata, listing protocols and ports used and keyword searching.
			//Volatility 
				//Tool for memory forensics, extract a .pst file out of memory for outlook info and then use a tool to browse them EG pffexport
				//Find OS related to extracted .mem file 
				visibility -f [filename] imageinfo 
				//high-level view of running processes: pslist, Scans memory for EPROCESS blocks: psscan, Display parent-process relationships: pstree, 
				// Scan memory for FILE_OBJECT handles: filescan, Extract FILE_OBJECTS from memory: dumpfiles	
				volatility -f [filename] â€“profile=[Profile abtained from imageinfo] {}
				
										
									
	File extensions>
		//Rename file to see it anouther format works
		//Edit a file in a hex editor (EG ghex) to find info
		//File header
			//Signiture made up of bytes near the start of a file, give infomation on type of file (magic bytes/numbers) 
			//Get info on file header
				file [filename]
			//Check for ASCII 
				strings [file]
				
		
		
		
		
Utility>
	//Path
		//Run something in the current folder
		./programname
		//Run via path starting from the root folder 
		/directory/programname
	//Line formatting
		//Run two commands on a line
		echo "Hello"; echo "World"
		//Write a command on two lines
		 echo "Hello "\
		"World"	
	//Dealing with running processes
		//Stop running program
		ctrl + C
		//Pause running program 
		ctrl + Z
		//Send paused task to the background
		bg
		//Bring paused task back to the foreground
		fg
	//Scripting
		//Create a text file and enter ->
		#! /bin/bash
		echo "This is my first bash script..."
		cd ~/Desktop
		ls -halt
		touch somefile
		ls -halt
		echo "Pretty cool, right?"
		//Make that text file an executable ->
		chmod +x myscript.sh
		//Run script
		./myscript.sh
