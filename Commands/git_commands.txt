"//" Comments
"" instructions
"->" Process
"<Ix>" Index "x"
"{Ix}" Reference to index "x"

//GIT COMMANDS
	//CORE GIT
		//Explaining how it works
			//Git is the version control system that runs locally on your PC, GitHub.com is a hosting website that saves files. To go past saving files a link between the local repo and online GitHub repo needs to be established
			//Git to GitHub: A repositary is created (a file system is marked as a repositary) -> you set files to be tracked (changes to these files are saved by git) -> Established local repo to online repo connection 
			// -> Tracked files are staged to be pushed (commited) -> staged pushed up to the remote repositary 
			//GitHub to Git: Establish online repo to local repo connection -> pull repositary down locally -> changes to current files are tracked and new files added are tracked -> commit changes -> push changes
			//Cloning a repo: This means to pull someone elses repo down locally, you can do this to copy remote repositaries to edit it locally as your own, though you would need permission to push chanegs to the original 
			
		//How to git (practical guide)	
			//Starting a repositary
				//Create online GitHub preositary at Github.com -> Create local repositary {I1} -> Connect local to online repositary {I2}
				// -> Add files to tracking and commit changes (get them ready to be pushed) {I3} -> push changes to the online repo {I4}  
			//Maintaining a repositary
				//Commit changes for tracked files {I5}  -> Pushing commited files {I4}
				//Pull changes down locally {I6}
			//Use someone elses existing repositary
				//Clone an existing repositary {I7}
				
				
		<I1>//Initializing a Repository in an Existing Directory:
				//Go to project folder
					cd /c/user/my_project
				//Create local repositary
					git init
		
		<I2>//Connect repositary to a remote one (only need to do once during setup)
			git remote add origin https://github.com/Eth-H/JPP
			//Check if the connection exists
			    git remote -v

		<I3>//Initialise repositary
			//Add all files in repositary to tracking (so they can be commited)
				git add .
			//Add license file
				git add LICENSE
			//Commit all tracked files to the repositary ("-m" gives the commit comment)	
				git commit -m "initial commit"
		
		<I4>//Pushing to GitHub.com
				//This means moving files from locally to the online GitHub repositary
					git push origin master
					//If you run into problems
					    git push origin master --allow-unrelated-histories
					    git push origin master -f
						
					//Push wthout origin link
					git push https://[username]@github.com/[github repository] [local branch name]:[remote branch name]
		
		<I5>//Commit files:  command, optional commit message, ignore staging area (no git add)
			//Stage files to be pushed up to the actual repositary
			git commit 
			git commit -m Fix this thing
			git commit -a 
		
		<I6>//Pull Repositories
			//Pull online GitHub repositary to locally
				git pull  https://github.com/Ethan1745/tania_guide master 
			
		<I7>//Clone an existing repository:    commnd, url, git targetDirectoryName
			git clone https://github.com/libgit2/libgit2 mylibgit
		
		//<I8>//Add files to .gitignore
		    //Listed files are not tracked by git
		    echo node_modules > .gitignore

		//<I9>//Delete git repo
		    //Turn on view hidden files for windows 10 OS
		        //Open File Explorer from the taskbar.
                //Select View > Options > Change folder and search options.
                //Select the View tab and, in Advanced settings, select Show hidden files, folders, and drives and OK.
            //Then delete the .git folder

		//Configure account
			git config --global --list
			git config --global user.name "Firstname Lastname"
			git config --global user.email username@email.com
			//or
			git config --global --edit
		
	//ADDITIONAL GIT
		//Check status:
			git status
			//or
			git diff

		//Add file to respository or stage updates:
			git add README

		//Create a file listing patturns to be ignored, ignore files eninding with .o or .a, ignore files ending with ~
		//- [Blank lines are or staring with "#" are ignored, start with / to ignore recursivity, end with / to avoid a directory, negate a patturn by starting wioth an exclamation mark]
			cat .gitignore
			*.[oa]
			*~

		//Remove files: Command, untrack but keep file, delte all .log files in the log/ directory, removes all files ending with ~, untrack directory
			rm 'PROJECTS.md'
			git rm --cached README
			git rm log/\*.log
			git rm \*~S
			git rm --cached -r .

		//See old version:
			-git show "file"
			
		//Head is checked out problem
			//Create new branch and re-attach HEAD to it
			git checkout -b temp
			
			//Check differences between branches before continuing
				git log --graph --decorate --pretty=oneline --abbrev-commit master origin/master temp
				git diff master temp
				git diff origin/master temp
			
			//Update master branch to point to the new branch
				git branch -f master temp
				git checkout master
			//Push it
				git push origin master

        //Remove folder from local git and remote 
            git filter-branch --tree-filter 'rm -rf node_modules' --prune-empty HEAD
            git for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git update-ref -d
            echo node_modules/ >> .gitignore
            git add .gitignore
            git commit -m 'Removing node_modules from git history'
            git gc
            git push origin master --force

				
				
				
		
		
		
		
