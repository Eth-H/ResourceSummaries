//Midnight commander
    //File manager
        Switch column: tab
        Bottum repersents F1 – F10 
        Move mc to background ctrl+o
        select multiple files: insert on each file
        Change default editor: select file -> F2 -> 1 -> select-editor
	        //or naviage to .selected_editor in homes file
        Change file permissions: F9 -> File -> chown -> select category -> r, w, x
		
		Simulate F keys
		F10: Esc + 0
		F1-10: Esc + 1-10
//moc
    //music player
    //run
        mocp
    //quit
        q    
    //Play
    	//pause
    		p, SPACE
	    //Next song
		    n
	    //Previous
		    bb
	    //Change play order
		    //toggle repeat
			    R
		    //toggle suffle
			    S
		    //toggle autonext
			    X
    //playlist
	    //Move to playlist
		    TAB
	    //Edit playlist
		    //Add file/directory
			    a
		    //Recuresively add directory 
			    A
		    //Del item
			    d
		    //clear playlist
			    C
		    //Save playlist
			    V
    //Switch layout 
	    l
    //Edit volumn: -1%, +1%, -5%, +5%,
	    <, >, (,), .
		
	//Edit options
		mkdir ~/.moc
		cp /usr/share/doc/moc/examples/config.example.gz ~/.mocp
		//Change options you wan, change theme to Theme = /usr/share/moc/themes/nightly_theme & XTermTheme = /usr/share/moc/themes/nightly_theme
		nano config.example
//virtual box
	//install
		sudo apt install virtualbox virtualbox-qt virtualbox-guest-additions-iso
		//Extra virtual box drivers (mostly for guest additions features)
		sudo apt-get install virtualbox-guest-utils virtualbox-guest-x11 virtualbox-dkms virtualbox-guest-dkms     
	//Setup guest additions
		//run machine and insert CD additions
		./autorun.sh
		//reset machine

//Images
	//magic
		sudo apt install magic
			convert sample.png sample.jpg

//Sandbox
	//fire jail		
		//Default options
			/boot – blacklisted, /bin – read-only, /dev – read-only; similar to the home directory, only a skeleton filesystem is available
			/etc – read-only; /etc/passwd and /etc/group have been modified to reference only the current user, /home – only the current user is visible
			/lib, /lib32, /lib64 – read-only, /proc, /sys – re-mounted to reflect the new PID namespace; only processes started by the browser are visible
			/sbin – blacklisted, /selinux – blacklisted, /usr – read-only; /usr/sbin blacklisted, /var – read-only; similar to the home directory, only a skeleton filesystem is available

		// --appimage: sandbox an AppImage application, 
		// --blacklist=[filename]: blacklist directory or file, --noblacklist=[filename]: disable blacklist for file or directory .
		//--whitelist=[fileName]
		// --chroot=[dirname]: chroot into directory, --private=[dirPath]: temporary home directory.
		// --hostname=[name]: set sandbox hostname, --hosts-file=[file]: use file as /etc/hosts, --dns=[address]: set DNS server.
		// --ip=[address]: set interface IP address.
		// --netstats: monitor network statistics, 
		// --noroot: install a user namespace with only the current user, --nosound: disable sound system, --novideo: disable video devices
		//--net=eth0: new network space, --ip=[custom IP]: 192.168.1.155
		//  --tree: print a tree of all sandboxed processes, --list: List all running sandboxes
		// --trace: trace open, access and connect system calls, --tracelog: add a syslog message for every access to files or directoires blacklisted by the security profile.
		// --x11: enable X11 sandboxing. The software checks first if Xpra is installed, then it checks if Xephyr is installed. If all fails, it will attempt to use X11 security extension.
		// -no-remote
		// --profile=[fileName] - use a custom profile, --profile.print=name|pid - print the name of profile file, --profile-path=directory - use this directory to look for profile files.	
		fire jail {} [programName]

		//firejail all programs running by a user by changing default share
			chsh shell /usr/bin/firejail


		//EG
			firejail --blacklist=/home/emera;/mnt;/media --noroot --netstats --private=/home/virtualHome [programName] 
		
	//chroot
	//move root somewhere else	
		sudo apt-get update
		sudo apt-get install dchroot debootstrap
		sudo mkdir /test

		sudo nano /etc/schroot/schroot.conf
		//modify
			[saucy]
				description=Ubuntu Saucy
				location=/test
				priority=3
				users=demouser
				groups=sbuild
				root-groups=root
		//Setup with just certain files
			mkdir /chroot
			//add wanted directories -> copy wanted files and needed liabaries
				//Get wanted executables
					mkdir /chroot/{bin}
					cp -v /bin/{bash, ls} /chroot/bin
				//Get needed liabraries	
					mkdir /chroot/{lib, lib64}
					//Check libraries needed to run the wanted executable
						ldd /bin/bash
						ldd /bin/ls
					cp -v /{lib/bib64} /chroot/{lib/lib64}
			//enter chroot
				sudo chroot /chroot/ /bin/bas
			//exit
				exit	
		//Setup with full system 
			//Generate skeleton OS, add --foreign if architectures dont rematch
				debootstrap --arch=amd64 unstable my_deb/
			//Setup process mangagement and add temp home thats lost on exit
				sudo mount -o bind /proc my_deb/proc
				mount -t tmpfs -o size=100m tmpfs /home/user
			//Setup internet
				cp /etc/hosts /chroot/etc/hosts
				sudo cp /etc/resolv.conf /var/chroot/etc/resolv.conf	
			//enter chroot env
				chroot my_deb/ /bin/bash
			//setup graphical applications
				//run outside chroot
					xhost
				export DISPLAY=:0.0
				
			//custom chroot service
				[Unit]
				Description=my_chroot_Service
				[Service]
				RootDirectory=/chroot/foobar
				ExecStartPre=/usr/local/bin/pre.sh
				ExecStart=/bin/my_program
				RootDirectoryStartOnly=yes
				systemctl start my_chroot_Service.service
				
		
			//alt setup
				//Generate skeleton OS, add --foreign if architectures dont rematch
					sudo debootstrap --variant=buildd --arch amd64 saucy /test/ http://mirror.cc.columbia.edu/pub/linux/ubuntu/archive/
					sudo chroot /test /debootstrap/debootstrap --second-stage


				sudo nano /etc/fstab
						//edit
							proc /test/proc proc defaults 0 0
							sysfs /test/sys sysfs defaults 0 0	
				//mount within guest
					sudo mount proc /test/proc -t proc
					sudo mount sysfs /test/sys -t sysfs
				//unmount proc filesystems
					sudo umount /test/proc
					sudo umount /test/sys
				//del after use
					rm -rf /test/
	//Ip-netns
	//Directly uses network namespace to create virtual interfaces
		//Create network namespace
			ip netns add netns1
		//Check interfaces inside
			ip netns exec netns ip addr
		//Execute shell in it
			ip netns exec netns /bin/bash	
		//Bring up loop interface
			ip netns exec netns ip link set dev lo up
		//Setup ethernet
			ip link add veth0 type veth peer name veth1
			ip link set veth1 netns netns1
		//Set IP
			ip netns exec netns1 ifconfig veth1 10.1.1.1/24 up
			ifconfig veth0 10.1.1.2/24 up
	//Unshare
	//Create isolated environment and run program, can combine different created namspaces
		//--net: different network stack, create user namespace environment
		//--user: create a user namespace 
		//--pid --fork: setup PID namespace
		unshare {} [programToRun]
	//Containers
		//System-nspawn
		//Creates isolated containers, has separate mount point, process tree
			debootstrap --arch=amd64 unstable my_deb/
			//Get in container, --network-bridge=br0: Add network set
				systemd-nspawn -D my_deb {}
			//Boot into container, remember change root pw in passwd, 
				systemd-nspawn -bD my_deb
		//machinectl
		//Control state of systemd based VM
			//-a: status of all running containers
			machinectl {} 
			status: status of specific container, login: login, switchoff: poweroff, -s kill: kill forcefully, -M: View logs
			machinectl {} {[containerName]}
		
		//Docker
			//Start daemon
			service docker start
			//Download base image
				docker pull kalilinux/kali-linux-docker
				//or get them from https://hub.docker.com/
			//Run program inside container
				docker run -i -t kalilinux/kali-linux-docker [programName]		
			//images: see avaliable images and get details (EG containerID), ps: List running containers	
			//commit [containerID] [imageName]:	Save current state as image
			//rmi [imageName]: remove image
				docker {}
			//stop [containerID]: Stop container, rm [containerID]: del files created on host node by that server
				docker {} 
			//Run apps on docker instance
				//Mount external host system 
					docker run -it -v /temp/:/home/ kalilinux/kali-linux-docker /bin/bash
				//Attach docker port to external system port
					docker run -it -v /temp/:/home/ -p 4567:80 kalilinux/kali-linux-docker /bin/bash
				//Mount x server file
					docker run -it -v -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix \ kalilinux/kali-linux-docker /bin/bash
			//Move image
				//push [imageName]: Push it on the docker online repo, export [imageName]: export as archive
					docker {} 				
			
				
				
				

		
		
//wine 
	//install
		apt install wine winetricks

	mkdir wine, cd wine
	//Set architecture, win32:, win64:,
		WINEARCH={} WINEPREFIX=~/wine/[bottleName] winetricks
	//In GUI: Select default wine prefix -> install dll or component: what u want, dotnet34 and dotnet 452, tahoma -> run wine.cfg -> drop applications into drive_c
	
	//alt route
	mkdir wine
	//move exe to location
		//Set architecture, win32:, win64:,
			WINEARCH={} WINEPREFIX=~/wine/[bottleName] winecfg



//vim commands
	Global
		:help keyword - open help for keyword
		:saveas file - save file as
		:close - close current pane
		K - open man page for word under the cursor
		
		Change mode
			normal mode
				to command mode- :
				to insert- any insert command (EG i)
				exit insert or command mode- esc or q
				
	Cursor movement
		h - move cursor left
		j - move cursor down
		k - move cursor up
		l - move cursor right
		H - move to top of screen
		M - move to middle of screen
		L - move to bottom of screen
		w - jump forwards to the start of a word
		W - jump forwards to the start of a word (words can contain punctuation)
		e - jump forwards to the end of a word
		E - jump forwards to the end of a word (words can contain punctuation)
		b - jump backwards to the start of a word
		B - jump backwards to the start of a word (words can contain punctuation)
		% - move to matching character (default supported pairs: '()', '{}', '[]' - use <code>:h matchpairs</code> in vim for more info)
		0 - jump to the start of the line
		^ - jump to the first non-blank character of the line
		$ - jump to the end of the line
		g_ - jump to the last non-blank character of the line
		gg - go to the first line of the document
		G - go to the last line of the document
		5G - go to line 5
		fx - jump to next occurrence of character x
		tx - jump to before next occurrence of character x
		Fx - jump to previous occurence of character x
		Tx - jump to after previous occurence of character x
		; - repeat previous f, t, F or T movement
		, - repeat previous f, t, F or T movement, backwards
		} - jump to next paragraph (or function/block, when editing code)
		{ - jump to previous paragraph (or function/block, when editing code)
		zz - center cursor on screen
		Ctrl + e - move screen down one line (without moving cursor)
		Ctrl + y - move screen up one line (without moving cursor)
		Ctrl + b - move back one full screen
		Ctrl + f - move forward one full screen
		Ctrl + d - move forward 1/2 a screen
		Ctrl + u - move back 1/2 a screen
		Tip Prefix a cursor movement command with a number to repeat it. For example, 4j moves down 4 lines.

	Insert mode - inserting/appending text
		i - insert before the cursor
		I - insert at the beginning of the line
		a - insert (append) after the cursor
		A - insert (append) at the end of the line
		o - append (open) a new line below the current line
		O - append (open) a new line above the current line
		ea - insert (append) at the end of the word
		Esc, Ctrl + [ - exit insert mode
	Editing
		r - replace a single character
		J - join line below to the current one with one space in between
		gJ - join line below to the current one without space in between
		gwip - reflow paragraph
		cc - change (replace) entire line
		C - change (replace) to the end of the line
		c$ - change (replace) to the end of the line
		ciw - change (replace) entire word
		cw - change (replace) to the end of the word
		s - delete character and substitute text
		S - delete line and substitute text (same as cc)
		xp - transpose two letters (delete and paste)
		u - undo
		Ctrl + r - redo
		. - repeat last command
	Marking text (visual mode)
		v - start visual mode, mark lines, then do a command (like y-yank)
		V - start linewise visual mode
		o - move to other end of marked area
		Ctrl + v - start visual block mode
		O - move to other corner of block
		aw - mark a word
		ab - a block with ()
		aB - a block with {}
		ib - inner block with ()
		iB - inner block with {}
		Esc - exit visual mode
	Visual commands
		> - shift text right
		< - shift text left
		y - yank (copy) marked text
		d - delete marked text
		~ - switch case
	Registers
		:reg - show registers content
		"xy - yank into register x
		"xp - paste contents of register x
		Tip Registers are being stored in ~/.viminfo, and will be loaded again on next restart of vim.
		Tip Register 0 contains always the value of the last yank command.
	Marks
		:marks - list of marks
		ma - set current position for mark A
		`a - jump to position of mark A
		y`a - yank text to position of mark A
	Macros
		qa - record macro a
		q - stop recording macro
		@a - run macro a
		@@ - rerun last run macro
	Cut and paste
		yy - yank (copy) a line
		2yy - yank (copy) 2 lines
		yw - yank (copy) the characters of the word from the cursor position to the start of the next word
		y$ - yank (copy) to end of line
		p - put (paste) the clipboard after cursor
		P - put (paste) before cursor
		dd - delete (cut) a line
		2dd - delete (cut) 2 lines
		dw - delete (cut) the characters of the word from the cursor position to the start of the next word
		D - delete (cut) to the end of the line
		d$ - delete (cut) to the end of the line
		x - delete (cut) character
	Exiting
		:w - write (save) the file, but don't exit
		:w !sudo tee % - write out the current file using sudo
		:wq or :x or ZZ - write (save) and quit
		:q - quit (fails if there are unsaved changes)
		:q! or ZQ - quit and throw away unsaved changes
		:wqa - write (save) and quit on all tabs
	Search and replace
		/pattern - search for pattern
		?pattern - search backward for pattern
		\vpattern - 'very magic' pattern: non-alphanumeric characters are interpreted as special regex symbols (no escaping needed)
		n - repeat search in same direction
		N - repeat search in opposite direction
		:%s/old/new/g - replace all old with new throughout file
		:%s/old/new/gc - replace all old with new throughout file with confirmations
		:noh - remove highlighting of search matches
		Search in multiple files
			:vimgrep /pattern/ {file} - search for pattern in multiple files
			e.g.:vimgrep /foo/ **/*
			:cn - jump to the next match
			:cp - jump to the previous match
			:copen - open a window containing the list of matches
	Working with multiple files
		:e file - edit a file in a new buffer
		:bnext or :bn - go to the next buffer
		:bprev or :bp - go to the previous buffer
		:bd - delete a buffer (close a file)
		:ls - list all open buffers
		:sp file - open a file in a new buffer and split window
		:vsp file - open a file in a new buffer and vertically split window
		Ctrl + ws - split window
		Ctrl + ww - switch windows
		Ctrl + wq - quit a window
		Ctrl + wv - split window vertically
		Ctrl + wh - move cursor to the left window (vertical split)
		Ctrl + wl - move cursor to the right window (vertical split)
		Ctrl + wj - move cursor to the window below (horizontal split)
		Ctrl + wk - move cursor to the window above (horizontal split)
	Tabs
		:tabnew or :tabnew file - open a file in a new tab
		Ctrl + wT - move the current split window into its own tab
		gt or :tabnext or :tabn - move to the next tab
		gT or :tabprev or :tabp - move to the previous tab
		#gt - move to tab number #
		:tabmove # - move current tab to the #th position (indexed from 0)
		:tabclose or :tabc - close the current tab and all its windows
		:tabonly or :tabo - close all tabs except for the current one
		:tabdo command - run the command on all tabs (e.g. :tabdo q - closes all opened tabs)

