Others>
	Unknown>
		readlink -f /proc/{PID of process}/exe
	Command combinations>
		
Local info gathering>
		System info>
			List hardware>
				//gpu drivers
					lshw -numeric -C display
				//CPU
					cat /proc/cpuinfo
				//Memory
					//All
						cat /proc/meminfo
					//Memory and swap useage
						free
				//Disk useage
					df -h
				//Directory space useage
					du
			//Get kernel version
				uname -a
			//OS version
				lsb_release
			Displays>
				//no param: list display info, --output [displayName]: select display 
				 //--mode [widthxheight]:, --primary: set selected display to primary, --same-as [displayName]: mirror output from selected display to passed display 
				xrandr {}? {}?...
				//EGs
					xrandr --output [display1Name]  --same-as [display2Name]
					xrandr --output HDMI-1-1 --same-as eDP-1
					xrandr --ouput LVDS --pos 0x0 --output HDMI-0 --pos 0x0
				Xorg display server
					//run server
						startx
					//Run test server and generate config
						Xorg -configure
						
		Time>
			data
			cal
			uptime
			
Utility>
	Compression>
		tar>
			//Extract -> create
				//Normal
					tar cf file.tar [files] 
					tar xf file.tar 
				//Gzip
					tar czf file.tar.gz [files]
					tar xzf file.tar.gz
				//Bzip2
					tar cjf file.tar.bz2 [files]
					tar xjf file.tar.bz2 â€“ Extract a tar using Bzip2
		zip>
			//Compresses file and renames it to file.gz
				gzip file
			//Decompresses file.gz back to file
				gzip -d file.gz 
	Print>
		//Print demon
			/etc/rc.d/init.d/lpd start 
			/etc/rc.d/init.d/lpd stop
			/etc/rc.d/init.d/lpd status
		//Print queue
			//Display jobs in queue
				lpq
			//Remove jobs from queue	
				lprm
		//Print a file
			lpr
		//Printer control tool
			lpc
		//Manual
			//Print as plain text
				man [subject] | lpr 
			//Print as Postscript output
				man -t [subject] | lpr 
		//Start X printer setup interface
			printtool
	Network>
	
		
	General>
		//Convert file to pdf
			ps2pdf
		//Time command
			time []

System>
	boot>
		efibootmgr -v
	terminal>
		//none: open new terminal window, -e: [commandName]: open new terminal windows and execute command, --tab: open new tab, to run command in new tab pass it afterwards
			x-terminal-system {}?...
		//EG
			xfce4-terminal --geometry 80x40 -e mocp --tab -e mc
		//Exit shell, 
		//none: Leave the shell, [integer, 0 or 1-255]: change the scripts exit return status (instead of leaving it to the last command), EG exit 0 
			exit {}?
		commands>
			//get info on commands
				//none: run command, -v: command description, -V: verbose command description
				command {}? [commandName]	
				//man pages
					man [commandName]
				//Search man pages for key words, use "" to make sure its isolated
					apropos ["keyword"]	
				//-h, --help 		
					[binName] {}
			
		shell>
			//change shell
				chsh {}
	kernel modules>
		//show status of modules in the linux kernel
			lsmod 
			lsmod | grep [moduleName]
		//Add and remove modules from the Linux Kernel
			modprobe {}?
        //Add modules to the kernel via path
            ismod [pathToModule]
	Partitions>
		//info gathering
			//output mounted partitions
				cat /etc/fstab
				//find mounted filesystems, -s: all, [fileSystemPartitionName]: get more infomation about selected filesystem
				findmnt {}
			//entire disk partition summary, includes flags
				sudo parted -l
			//output all partitions, includes each partitions UUID, PARTUUID, file system type
				sudo blkid
		
        //mount partition
            sudo mount /dev/[partitionName] [pathWhereToMount]
            sudo mount /dev/sdb3 /mnt/partition3
		//EG, use to remount a drive mounted as read only (id and gid come from id command)
			sudo mount -o remount,uid=1000,gid=1000,rw /dev/[partitionName]
		//check a ntfs drive for errors (generally windows problems), otherwise run chkdik on windows then shutdown /s
			sudo ntfsfix /dev/sdXY
		
		iso files>
			//burn iso to usb
				sudo dd bs=4M if=/path/to/manjaro.iso of=/dev/sd[drive letter] status=progress oflag=sync
				//dd: writing to '/dev/sdc' : input/output error, change to  of=/dev/sdc1
			//transfer is to iso hybrid
				//add bios
					isohybrid -v /path/to/name.iso
				//add uefi
					isohybrid --uefi -v output.iso
				
	Hardware>
		display infomation>
			//system, machine, battery, CPU, Graphics, Audio, network, drives, RAID, partition, sensors, runtime info
			inxi -Fxxxz
			//gpu card
				//list x11 display server files, 
				ls -laR /etc/X11 ; cat /etc/X11/xorg.conf.d/*.conf
				//check blacklisted modules (modprobe cant load them into the kernel)
				ls -la /etc/modprobe.d ; cat /etc/modprobe.d/*.conf
				//gpu modules loaded at boot
				ls -la /etc/modules-load.d ; cat /etc/modules-load.d/*.conf
				//manjaro only tool, configure graphics drivers
					//get info
						//-l: list video drivers, -li: list installed video drivers
						 //-d: detailed info, --pci:  PCI connection (check unforeseen consequences or problems upon removing a driver)
							mhwd {} {}?...
					//remove driver	
						sudo mhwd -r [pci_orUSB] [nameOfDriver]
			//debug info
				hwinfo --short
				
			nvidia cards>
				//-q 
				 //all: display all options, gpucoretemp:, CUDACores:, GPUMemoryInterface:, GPUCurrentClockFreqs:
				nvidia-settings {} {}  
				nvidia-smi -q -d temperature
				//constant report
					watch -n 1 nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader
					nvidia-smi -l 10
	
	Edit machine state>
		shutdown
		//Similar parameters in windows and linux, prefix with / in windows and - in linux
		//-r: Restart, -t: Time to process, [number]: time to process, now:,  
			shutdown {} {}
		reboot
		//Start the X system
			startx
	Permissions>
		Superuser permissions>
			//Swap to root user
				su root
				sudo su
				sudo bash
			//Use sudo to enter admin PW for temporay root privillages, note when piping commands sudo may needed to be prefixed for both commands
				sudo [command]
			//Get a root shell with sudo
				sudo find /etc -exec sh -i \;
			//run last command as root
				sudo !!
		chmod>
			//Edit a programs permissions, +x: Give execute permissions, -x: Take	 execute permissions, +w: Give write permissions, u+[permissionLetter]: permissions only apply for the user	
			//or 
			//set all permissions: 755 (Each number repersents 1 of user/user group/others; Think of the number as binary for there effect, 111 = 7 so means +rwx, or Read = 4 Write = 2 Execute = 1 then add)
				chmod {} [filePath]
		chown>
			//Change ownership of a file, EG
			sudo chown root:root ./demo
		stat>
			//Get the owner of a file
			stat -c %U file
		//users
			//list users
				cut -d: -f1 /etc/passwd
			//Get current user
				whoami
			//Create new user
				adduser [accountname] 
			//Give account a new password
				passwd [accountname] 
			//Create user directory (if it doesnt exist already)
				mkhomedir_helper username
			//del user
				sudo userdel username
				sudo rm -r /home/username
		
		Signing>
			//List apt keys
				sudo apt-key list
			//Remove
				sudo apt-key del [keyName] 
		
	Processes>
		//See running processes using the most resources
			top	
		//List running processes
			ps auxf
			//less: scroll through, grep [processName]: find stuff, grep bash | grep -v grep: find stuff and ignore grep process
			ps auxf | {}
		//Print current user running processes, See more info: -u, See all processes (not only for your user): -ax, -o [processName]:,
			ps {}
		Services>
			//See status of all services
				service --status-all
			//All
				systemctl list-unit-files --type=service
			//Stop service auto starting
				sudo systemctl disable [serviceName]
			//start:, stop:
				sudo service [serviceName] {}		

		//Get PID
			pgrep
		//Kill process, -9: kill 
			kill -{signal} [PID]	
			//run command to get PID first
				kill -9 `lsof -t -u [userName]`
	 
		//Add space to run new jobs
			//Send paused task to the background
				bg
			//Bring paused task back to the foreground
				fg
		//Stop all running processes
			halt
		cron table>
			//Schedule commands to run at regular time intervals
			//Open crontab to edit tasks
				crontab -u [user]  [filePath]
			//Can edit /tmp/crontab
				minute(0-59) hour(0-23) day(1-31) month(1-12) weekday(0-6) command
			//EG
				0,14,29,44 * * * * /usr/bin/example2
				runs /usr/bin/example2 at the 15-minute mark on every hour, every day. Make sure you add each new task on a new line.
		//get info on running processes
			// -p [processID]: Find out what files the process is using
			//-r: read access, -w: write access
			//-u [userName]: process owned by specific user, -u^[userName]: not owned
			//-t: just get process PID
				lsof {}
				
			//-i: Check for IPv files 
			 //tcp:[portName], 4: IPv4, 6: IPv6
				lsof {} {}
				//EG get all tcp port 80 traffic 
					lsof -i tcp:80 -P -R
					
Directories and files>
	Info gathering>
		List file directories>
			ls
				//-l: Long form list of folders, -t: Sort by modification time, -a: Hidden files, -alt: Combination of previosu commands
				ls {}
				//Specific file/folder/path
				ls [filePath]
			//List working directory
				pwd
		Compare directories/files>
			//-q: Only report on differences, -r: recursive
				diff {}? [dir1] [dir2]
			
		Display contents of a location>
			//Change amount of contents displayed
				//Gradually load program into memory
					less [filePath]	
				//Output first twenty characters	
					head -20 [file] 
				//Output last 20
					tail -20 [file]
				//Output contents of file as it grows starting from last ten lines
					tail -f file
			cat>
				//Print text file contents to console
					cat filename
				//Join two files
					cat filename1 filename2
				//Redirect file output
					//Overwrite it
						cat filename1 filename2 > new_file
					//Append to it	
						cat filename1 filename2 >> appended_file
				//Use wildcard operator, match any files: *, match all txt files: *.txt, match files starting with pass: pass*
					cat {}
			strings>
				//Get all strings in a file
					strings [filePath]		
		Search filesystem>
			grep>
				//use * and "" in queries, "" can contain regex expressions
				//none:, -i: ignore case, -r: recursive search, -s: supress error msg, -v: search for lines without searchQuery
				//-n: line number, -a[numberOfLines]: return numberOfLines surrounding found results, -b: byte offset with output lines 
				//-E: use extended regular expression, can also use egrep, use if using any advanced RE patturns
				grep {} [searchquery] [filename]
				//EG piping commands
					//Search for a filename
						ls | grep [filename]
					//Print a files contents and filter to a certain number of lines around target string
						cat securityEventFile | grep -a[numberOfLines] [targetString]	

			find>
				//-name:, can use wildcards in file name EG "*myfile*"
				//-mtime -[num]: find files in the last 30 days, -size +[num]M: find files > 10 MB in size
				//-perm -[permissionsValuable], -user [user]
				find [searchDirectoryPath] {searchMethod}... [searchQuery]
				//EG Search entire file system and redirect errors to a certain file 
					find / -name "passwords" 2> /dev/null
					find [path] {} {}

			whereis>
				//Find all the locations of a program
					whereis gimp

		
		
	Change directories>
		cd
			//..: Back one, .:curretn directory, ~: home, /home/agent/Desktop: specific path
				cd {}
			
	Edit file contents>
		
		Text editor>
		//Either will create file if it doesnt exist
			nano
				nano [filePath]
			vim
				//More powerful CLI text editor
					vim [filePath]
				//use i for insert/interactive mode
				// :q quit with saved changes, :q! quit while you have unsaved changes, :wq or :x save and quit
				
	Create file>
		//Note for any commands to effect hidden files add a . before the file name
		//Create a file with text, can use that operator to output anything to a file
			echo "[text]" > [newFilePath]
		//Check if a file exists, if it doesnt create it
			touch [filename]	
	
	Edit directories and files>
		move>
			//blank: no parameters, -n: Dont overwrite, -u: overwrite if timestamp is newer 
				mv {} [filePath] [targetFilePath]
			//Rename file
				mv [filePath] [filePathEndingInADifferentName]
		Copy>
			//blank: no parameters, -r or -R: use recursive parameter to copy directories (and contents)
				cp {} [filePath] [filePath]	
		Remove> 
			//blank: no parameters, -r: recursive, allows to remove folders
				rm {} [filePath]
		Make directory>
			mkdir [directoryPath]
			//Make multiple directories
				mkdir -p [folderName]/[subFolderName]/[subFolder2Name]
			//Set permissions
				mkdir -m 777 dirname
		//Sync two folders
			//
			 //-e: Execute commands, exploitable by wildcard injection 
				Rsync {} [firstFolder] [secondFolder] {}				

History>
	//Show history
		history	
	//Delete history
		history -c
	//For a reverse-command-search use CTRL + R, then type in part of a previous command, CTRL + R again to go further back
	
	//Hide commands
		//Prefix each command with a 'space'
		//or
			set +o history
	
Environment variables>
	//Data is ephemeral (disapears when you close the terminal window)
		//Print a EV. /home/user
			echo $HOME
		//Change the value of a EV temporarily
			export HOME=/tmp
		//Get all EV
			printenv
		PATH> 
			//Get the path of EV
			which [EV name]
			//When you open a bash shell it runs the script .bashrc, so you can add an export statement here to set PATH permanently
			export PATH=$PATH:/mycustomfolder

Network>
	Netcat>
		//Listen on a port
			nc -l 1337
		//Connect to a port
			nc 192.168.33.2 1337
		//Transfer files
			//Listen on port and send any output recevied content to [filename]
				nc -l 1337 > [filename]
			//Connect to computer and send the content of myfile
				nc 192.168.33.2 1337 < [localFilename]
	SSH>
		//  /etc/passwd /etc/shadow /etc/passwd.
		//Connect
			//Connect to secure file server with credentials, add a custom port (otherwise 22 is used): -p
				ssh username@domain.com {}
			//If a keyfile is needed instead of a separate password
					ssh -i /path/to/keyfile username@ipaddress
		//Copy local file to remote server
			scp file.txt username@domain.com:/folder/file.txt
		//Copy remote file to local PC 
			scp username@domain.com:/folder/file.txt file.txt
		//Close connection
			exit
	curl>
		//Perform HTTPS tasks, none: get request, --data "username=luffy&loggedin=true": post data, 
			curl https://example.com/index.php {} 			
	wget>
		//Blank: Download webpages, -c: Continue stopped download
			wget {} [url/file]
	Get info on domain>
		whois domain
		//DNS info
			dig [domain]
		//Reverse lookup host
			dig -x host
	 net-tools>
	 	//considered deprecated, but widely avaliable
		netstat>
			//Check listening ports, -a: all sockets, -u: udp, -t: tcp 
			//-l: listening sockets, -p: PID and program name, -n: dont resolve names 
			//-A [addressFamilyName]: address families, inet, inet6, ax25, netrom, ipx, ddp, x25
				netstat {}...
				netstat -lptu
				netstat -lpta
				netstat -A inet -p
		
		//List ip adddresses
			ifconfig
		//Set the params of the network interface which are specific to the wireless operation
			iwconfig
		//Display additional info from a wireless network interface that is not displayed by iwconfig
			iwlist 
		//Protocol used to ask the router for infomation of other connected devices on the network
		//none: list arp table
			arp {}...
		//Point to point conenction between two nodes, encapsulate packets in IP packets and send over IP infrastructure
			iptunnel {}...
		//
			nameif
			
	iproute2>
		//n: arp, route: netstat -r, maddr: netstat -g
		//a: addresses, link: netstat -i, -s: ip stats (these 3 act as ifconfig)
			ip {}...
		//iwconfig
			iw
		//nameif
			ip link
			ifrename
		//-t: tcp connections not in listen mode (servers), -u: udp not in LM, -x: unix sockets pipe connections,
		//-a: all connections EG -ta for all tcp connections, -l: listening connections, -n: dont resolve service names, -o: options
		//-s: prints statstics, --ipv4: ip version 4  
			ss {}...
			
		
Packages>	
	Package manager>
		apt-get>
		//Debian package manager, apt or apt-get
			//Update sources (servers with package info/download links)
				sudo apt update
			//Update installed software
				sudo apt upgrade
			//Download/remove software
				sudo apt install [packageName]
				sudo apt remove [packageName]
				//Fix installation problems
					//Force package installation
					sudo apt-get install -f
					//try to remove problomatic package or run CLean commands
				
			//Get info on a package
				aptitude show [packageName]
			//Search for a package
				sudo apt search [packageName]
			//Clean
				//Remove half-installed packages
				sudo apt-get autoclean
				//Remove apt cache
				sudo apt-get clean
				//Remove uneccessary software dependancies
				 sudo apt-get autoremove
			
		yum>
			//Fedora package manager
				//Automatically updates sources	
				//Upgrade isntalled software, blank: Update all software, [packageName]
					sudo yum update {}
				//Download/remove software
					sudo yum install [packageName]
					sudo yum remove [packageName]
        pacman>
            //arc linux package manager
            //-S: sync packages
	     //[packageName]: install package, -u: upgrade installed packages, y: download fresh pacakges, --noconfirm: dont ask, --ignore: ignore a packages upgrade
	      //[packageName]: apply previous option to selected package 				    					    
	    //-R [packageName]: remove software
	    //-Q: query packages
	     //-u: list outdated packages, -i: view package info, -l: list packages
              //[packageName]: apply previous option to selected package 
		//-U [packageName]: upgrade specific package
                sudo pacman {} {}?...
				
	    //EG Upgrade all packages 
		sudo pacman -Syu
         AUR (arch user repositary)>
		//first install base level package group
			pacman -S --needed base-devel
			//download package
				git clone https://aur.archlinux.org/package_name.git
			//or go to the AUR website and download snapshot, then extract
				tar -xvf package_name.tar.gz
			//download from link, extract afterwards
				curl -L -O https://aur.archlinux.org/cgit/aur.git/snapshot/package_name.tar.gz
		   cd package_name
		   //check contents
		      	less package
		   //--s: resolves and installs dependancies, -i: installs package
		   		makepkg -si
			//or run makepkg -s adn then instal yourself
				pacman -U package_name.pkg.tar.xz
			yaourt>
				wrapper for pacman that includes support for AUR
				//install
					
				//can use all pamac commands
					//[package name]: search AUR for package (then type its number), --stats: package installation stats, 
					yaourt {}...
		
		
	Packaged software>
		dpkg>
				// .deb files are packages generated for Debian-based distros, install with dpkg
				// Install debian package
					sudo dpkg -i /home/user/cowsay.deb
				//Remove
					sudo dpkg -r cowsay
				//List packages installed
					dpks -l
				//RE-configure package database (fix dpkg corruption problems)
					sudo dpkg --configure -a
			rpm>
				//Generated for Fedora-based distros
				//Install
					rpm -Uvh /home/user/cowsay.rpm
				//Remove
					rpm -e cowsay
				//List packages
					rpm -qa
	Building from source>
				//Look for INSTALL txt file
				//cd into direcotry with source code -> run configure ELF (executable) file to generate system specific makefile ->  run make to compile source code into an ELF -> 
				 // run sudo make install to move binary created and required files to system folders (now they can be used anywhere)	
					cd [pathToSourceCode]
					make [sourceCode]
					make install 
					
				git clone [url]
				cd [projectBin]
				mkdir build
				cd build
				cmake ..
				//Raise number after j relative to PC hardware
				make -j8
				sudo make install		


	
<Scripting languages>
	python>
		//run program
			python [fileName.py]	
	C>
		//It 32 bit compling doesnt work, some possible packages
			sudo apt-get install libc6-dev
			sudo apt-get install gcc-multilib
			sudo apt-get install libc6-dev:i386
		
		//Run a C program via compling it into an ELF
			gcc -o hello hello.c
		//Specify processor arcitechure
			gcc -m32 -o hello hello.c
		//Use MinGW cross-complier to compile for windows

Domestic Security tools>
	ClamAV>
		clamscan -r -i [pathToScan]
	rkhunter>
		//--check: Check the local system for rootkits
		rkhunter {}
	chkrootkit>
		chkrootkit
	
General applications>
	Linux mint firewall>
		sudo ufw reject in from 173.194.55.0/24
		sudo ufw reject in from 206.111.0.0/16
		sudo ufw status verbose
		
	proton vpn>
		sudo protonvpn-cli -init
		//or
		sudo pvpn -init
		//Login
			emerald1475@protonmail.com
			protonEmerald9903
		//Connect
			sudo protonvpn-cli -connect
			protonvpn-cli -c [server-name] [protocol]
			protonvpn-cli -r, --random-connect
			protonvpn-cli -l, --last-connect
			protonvpn-cli -f, --fastest-connect
			
		//Dialog
			sudo protonvpn-cli -m
		protonvpn-cli --reconnect
		sudo protonvpn-cli -disconnect
		
		protonvpn-cli --ip
		
	