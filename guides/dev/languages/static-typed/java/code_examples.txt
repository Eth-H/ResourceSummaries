//search collection without hasNext
    int index = 0;
    boolean searching = true;
    while(index < files.size() && searching) {
        String file = files.get(index);
        if(file.equals(searchString)) {
            // We don't need to keep looking.
            searching = false;
        }
        else {
            index++;
        }
    }

//while loop setup
boolean finished = false;
while(!finished) {
    do something
    if(exit condition) {
        finished = true;
    }
    else {
        do something more
    }
}


//tokenising strings
public HashSet<String> getInput() 
{
    System.out.print("> "); 
    String inputLine = 
           reader.nextLine().trim().toLowerCase();

    Scanner splitter = new Scanner(inputLine);
    HashSet<String> words = new HashSet<>();
    while(splitter.hasNext()) {
        String word = splitter.next();
        words.add(word);
    }
    return words;
}

public String generateResponse(HashSet<String> words)
{
    Iterator<String> it = words.iterator();
    String response = null;
    while(response == null && it.hasNext()){
        String word = it.next();
        response = responseMap.get(word);
    }
        
    if(response == null) {
        response = pickDefaultResponse();
    }
    return response;
}

//hash map methods
    private HashMap<String, String> contactsList = new HashMap<>();
    //add
    hashMap.put(key, value);
    //get keys or values  
    hashMap.keySet()
    hashMap.values()
//get keys that match a specific value
for (String name: contactsList.keySet()){
    if (searchNum.equals(contactsList.get(name))){
        collectionName.add(name)
    }
}
//replace an entrys key
    exits.put("newKey", map.remove("oldKey"));




//java.util.Collections 
    //sort alphanumerically
    Collections.sort(arrayList);
//java.util.Map
    //entrySet, get set view of mappings into HashMap
    Iterator it = map.entrySet().iterator();
    while (it.hasNext()) {
        Map.Entry pair = (Map.Entry)it.next();
        System.out.println(pair.getKey() + " = " + pair.getValue());
        it.remove(); // avoids a ConcurrentModificationException
    } 

//functional stuff 
    //lambdas
        //anonymous methods with no associated obj, pass as param 
            (param) -> {System.out.println(param)}
            
            collection.forEach((param) -> {system.out.println(param.getName())})
            collection.forEach(param -> system.out.println(param.getName()))



    //streams 
        //alternative iteration, pipeline of operations  
        //fixed order, no index as only sequential access 
        //arraylist is a stream method that creates a stream of cotents 
        //pipeline list: source -> outputed stream (Os)-> Os -> ... -> terminal operation               
        //Filter: select items from the input stream to pass on to the output stream (via true/false)
            arrayList.stream().filter(obj -> obj==newObj)    
        //Map: replace items from the input stream with different items in the output stream.
            arrayList.stream().map(obj -> obj.getName()).forEach(params -> System.out.println(param))    
        //Reduce: collapse the multiple elements of the input stream into a single element
            //acc passed to next method, start = first acc 
        reduce(start, (acc, element) -> acc + element) 
        sightings.stream()
            .filter(sighting -> animal.equals(sighting.getAnimal())
            .map(sighting -> sighting.getCount())
            .reduce(0, (total, count) -> total + count); 
        sightings.removeIf(sighting -> sighting.getCount() == 0);

        //parallel stream is processed using multiple processes as quickly as
possible
        int sumOfWeights = widgets.parallelStream()
           .filter(b -> b.getColor() == RED)
           .mapToInt(b -> b.getWeight())
           .sum();


//debugging 
    //syntax err -> compiler spot them 
    //logic errors (bugs), no immediate manifestation
    //reduce chance 
        //technique like encasulation 
        //attention to cohesion, coupling 
    //imorove detection
        //practices
            //modularization (support indepdant concurrent dev, +integration), documentation
    //testing -> search for err presence 
    //debugging -> search for err source 
    //Eg methods 
        //unit testing
            //test each unit (method, class, module)
            //do in development 9lower costs and build test suite)
            //unit contract (what to do, find violations, +-ve tests)
            //test boundaries (zero, one, full; search empty, remove/search
one, add to full)
            //bluej, Objects of individual classes can be created. Individual methods can be invoked. Inspectors provide an up-to-date view of an objectâ€™s state.
        //automate tests            
            //test framework (for automation of repetitive regression)
                //Junit: test cases (methods), test classes, assertions
(expected mtd results), fixures (support multiple tests)
        //manual walkthrough
            //tabulate values of key fields and document state changes 
            //verbal walkthrough, with someone else 
        //print statements
            //large output, right methods need to be documented
        //debugging, use supporting tools (debuggers) 
            //bluej 
                //breakthroughs, step n step-into exe, call seq (stack), obj state 
                //peek into pipeline of operations 
                    peek(s -> System.out.println(s))

    //Eg projects online-shop-junit, calculator-engine


//iterate 2D arr 
    Cell[][] cells;
    cells = new Cell[numRows][numCols];
    for(int row = 0; row < numRows; row++) {
        for(int col = 0; col < numCols; col++) {
            cells[row][col] = new Cell();
        }
    }
//nested array style
    for(int row = 0; row < cells.length; row++) {
        Cell[] nextRow = cells[row];
        for(int col = 0; col < nextRow.length; col++) {
            nextRow[col] = new Cell();
        }
    }


// cool grabbed code
    /**
      Return true if firstWord has been immediately
     * followed by secondWord; false otherwise.
     * @param firstWord
     * @param secondWord
     */
    public boolean followedBy(String firstWord, String secondWord)
    {
        if(words.containsKey(firstWord) && words.containsKey(secondWord)){
            for (int i = 0; i < allWords.size()-1; i++){
                if(allWords.get(i).equals(firstWord)){
                    if(allWords.get((i+1)).equals(secondWord)){
                        return true;    
                    }
                }    
            }
        }
        return false;
    }

//take dynamic stdin inp with str
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        String inp = new String();
        inp += s.next();
        while (s.hasNextInt()){
            inp += " " + s.nextInt();
        }
        String[] inpList = inp.split(" ");
        int t = 0;
        int c = 0;
        for (int i=0; i<inpList.length; i++){
            int currentInt = Integer.parseInt(inpList[i]);
            t+=currentInt;
            c++;
        }
        s.close();
        System.out.println(t/c);
    }

//reverse str
    char[] arr = inp.toCharArray();
    int len = arr.length;
    for(int i=0; i<(inp.length())/2; i++,len--){
        temp = arr[i];
        arr[i] = arr[len-1];
        arr[len-1] = temp;
    }

//read file
    private static List<String> readDictionary(String filename){
        try(BufferedReader reader = new BufferedReader(
                new FileReader(filename))) {             
            List<String> dictionary = new ArrayList<>();
            String word = reader.readLine();
            while(word != null) {
                dictionary.add(word.toLowerCase());
                word = reader.readLine();
            }
            return dictionary;
        }
        catch(Exception e) {
            System.out.println("Read of " + filename + " failed.");
            throw new RuntimeException(e);
        }
    }


