//Constuctors  
	//same name as class
	//can have two constuctors (one needs a different num of params)
	//auto generated if not produced 
	
	Public class MyClass {
	   
        private int num;
        private int width;
        private String theString;

        MyClass(int width, String theString) {
            //attribute not passed as a param, so not used by this classes new objects
            num = 100;
            //if passing parameter to class instance with a different name, no this.
prefex needed
            newWidth = width
            this.theString = theString            
            //declare new variable
            int gaya = yaya
        }
        //second constructor has different number of parameters
        MyClass(){
            num = 100;
        }
    }

    //If class isn't present in current package import it
    import [packagePath].ExternalClass
    Public class MyClass2 {
        //create external objects using the constructor
	    private ExternalClass externalObject1;
        private ExternalClass externalObject2;
	    MyClass2(){
            //if new instance variable is the same
            externalObject1 = new ExternalClass()
	        
	    }
        //declare object outside constructor
        public void method(){
            ExternalClass localVariableExternalObject = new ExternalClass()
        } 
	}
    
//arrays
public class ArrayClass(){
    
    public void static main(){  
    int arraySize = 8 
    //declare array variable, then create array and assign
    int[] intList = new int[arraySize]        
    //or
    String[] stringList = {"element0", "element2"}     
    
    //accessArray
    //get last element
    system.out.println(stringList[stringList.length-1])            
    
    }

    
//loops
    loopMethod(stringList){
        double total = 0;
        //equal to i<=(stringList.length-1)
        for (int i = 0; i < stringList.length; i++) {
            total += stringList[i];
        }   
        //foreach version
        for (int i: stringList){
            total += stringList[i];
        }
                    
    }



}
     



//Java data types
	//Primitive Data Types
		//unsigned and sign size differences
			//unsigned: -2^7 = -128, 2^7-1 = 127, signed: 2^7  = 255,
		//sizes
			2^15 = 65535, 2^31 = 4294967296, 2^63 = 2*9,223,372,036,854,775,807+1  
	 
		//byte
			//8 bit signed two's complement (TC) int, -2^7 to 2^7-1
			//save space in arrays
		//short, 16 bit signed TC int, 2^7
		//int, 32 bit signed TC int, 2^31
		//long, 64 bit signed TC, 2^63, Default value (DV) = 0L  	
float,single-precision 32-bit IEEE 754 floating point, DV = 0.0f 
double, double-precision 64-bit IEEE 754 floating point, DV = 0.0d  
		//boolean, 1 bit, DF = false
		//char, 16 bit unicode character, \u0000 to \uffff
		int decimal = 100; int octal = 0144; int hexa =  0x64;








 
